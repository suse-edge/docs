# Czech translations for PACKAGE package
# Copyright (C) 2024 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-07-23 11:17+0100\n"
"PO-Revision-Date: 2024-07-23 11:17+0100\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n"

#. type: Title =
#: asciidoc/demo_setup/demo_labs_setups.adoc:1
#, no-wrap
msgid "Demo/Lab Setups"
msgstr ""

#. type: Title =
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:1
#, no-wrap
msgid "Elemental on OSX on Apple Silicon (UTM)"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:2
#, no-wrap
msgid "Elemental"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:3
msgid "Via the https://elemental.docs.rancher.com/[official docs]:"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:4
msgid ""
"Elemental is a software stack enabling a centralized, full cloud-native OS "
"management with Kubernetes."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:5
msgid ""
"The Elemental Stack consists of some packages on top of SLE Micro for "
"Rancher:"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:6
msgid ""
"elemental-toolkit - includes a set of OS utilities to enable OS management "
"via containers. Includes dracut modules, bootloader configuration, cloud-"
"init style > configuration services, etc."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:7
msgid ""
"elemental-operator - this connects to Rancher Manager and handles "
"MachineRegistration and MachineInventory CRDs"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:8
msgid ""
"elemental-register - this registers machines via machineRegistrations and "
"installs them via elemental-cli"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:9
msgid ""
"elemental-cli - this installs any elemental-toolkit based derivative. "
"Basically an installer based on our A/B install and upgrade system"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:10
msgid ""
"rancher-system-agent - runs on the installed system and gets instructions "
"(\"Plans\") from Rancher Manager what to install and run on the system "
"Cluster Node OSes are built and maintained via container images through the "
"Elemental CLI and they can be installed on new hosts using the Elemental UI "
"plugin for > Rancher Manager or the Elemental CLI."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:11
msgid ""
"The Elemental Operator and the Rancher System Agent enable Rancher Manager "
"to fully control Elemental clusters, from the installation and management of "
"the OS on the > Nodes to the provisioning of new K3s or RKE2 clusters in a "
"centralized way."
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:12
#, no-wrap
msgid "What is Elemental Teal ?"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:13
msgid ""
"Elemental Teal is the combination of \"SLE Micro for Rancher\" with the "
"Rancher Elemental stack."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:14
msgid ""
"SLE Micro for Rancher is a containerized and \"stripped to the bones\" "
"operating system layer. At its core, it only requires grub2, dracut, a "
"kernel, and systemd."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:15
msgid ""
"Its sole purpose is to run Kubernetes (k3s or RKE2), with everything "
"controlled through Rancher Manager."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:16
msgid ""
"Elemental Teal is built in the openSUSE Build Service and available through "
"the openSUSE Registry."
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:17
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:36
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:18
msgid ""
"Elemental is a Kubernetes thing, so it only requires a proper cluster up & "
"running. However, in order to provision real clusters and hosts, it requires "
"to perform some steps such as downloading and customizing an ISO (or an "
"image file) and boot the ISO. This quickstart uses UTM to create a VM and a "
"few steps to create a proper image to boot from."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:19
msgid ""
"The trick here is there is no ARM64 image yet, but just a Raspberry Pi "
"one... so that's the one we will use. It is not generic, but it works."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:20
msgid ""
"A Kubernetes cluster where Elemental is deployed. Hint, you can use https://"
"suse-edge.github.io/quickstart/k3s-on-slemicro[the K3s on SLE Micro guide]."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:21
msgid ""
"Rancher server configured (server-url set). Hint: you can use https://"
"ranchermanager.docs.rancher.com/v2.6/getting-started/quick-start-guides/"
"deploy-rancher-manager/helm-cli[the official Rancher] docs or the https://"
"github.com/suse-edge/misc/blob/main/slemicro/create_vm.sh[create_vm.sh] "
"script for inspiration."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:22
msgid "Helm"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:23
msgid "jq"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:24
#, no-wrap
msgid "Elemental UI Rancher extension"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:25
msgid ""
"This is an optional step to enable the Elemental UI extension in Rancher "
"(see https://ranchermanager.docs.rancher.com/integrations-in-rancher/rancher-"
"extensions[more about Rancher extensions]):"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:26
#, no-wrap
msgid ""
"helm repo add rancher-charts https://charts.rancher.io/\n"
"helm upgrade --create-namespace -n cattle-ui-plugin-system \\\n"
"  --install ui-plugin-operator rancher-charts/ui-plugin-operator\n"
"helm upgrade --create-namespace -n cattle-ui-plugin-system \\\n"
"  --install ui-plugin-operator-crd rancher-charts/ui-plugin-operator-crd\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:27
#, no-wrap
msgid ""
"# Wait for the operator to be up\n"
"while ! kubectl wait --for condition=ready -n cattle-ui-plugin-system \\\n"
"  $(kubectl get pods -n cattle-ui-plugin-system \\\n"
"    -l app.kubernetes.io/instance=ui-plugin-operator -o name) \\\n"
"    --timeout=10s; do sleep 2 ; done\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:28
#, no-wrap
msgid ""
"# Deploy the elemental UI plugin\n"
"# NOTE: TABs and then spaces...\n"
"cat <<- FOO | kubectl apply -f -\n"
"apiVersion: catalog.cattle.io/v1\n"
"kind: UIPlugin\n"
"metadata:\n"
"  name: elemental\n"
"  namespace: cattle-ui-plugin-system\n"
"spec:\n"
"  plugin:\n"
"    endpoint: https://raw.githubusercontent.com/rancher/ui-plugin-charts/main/extensions/elemental/1.1.0\n"
"    name: elemental\n"
"    noCache: false\n"
"    version: 1.1.0\n"
"FOO\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:29
#, no-wrap
msgid ""
"# Or\n"
"# helm repo add rancher-ui-plugins https://raw.githubusercontent.com/rancher/ui-plugin-charts/main\n"
"# helm upgrade --install elemental rancher-ui-plugins/elemental --namespace cattle-ui-plugin-system --create-namespace\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:30
msgid "After a while, the plugin will be shown in the UI as:"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:31
#, no-wrap
msgid "elemental-ui-plugin.png"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:32
#, no-wrap
msgid "Elemental Operator"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:33
msgid "Elemental is managed by an operator deployed via Helm as:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:34
#, no-wrap
msgid ""
"helm upgrade --create-namespace -n cattle-elemental-system --install \\\n"
" --set image.imagePullPolicy=Always elemental-operator \\\n"
" oci://registry.opensuse.org/isv/rancher/elemental/dev/charts/rancher/elemental-operator-chart\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:35
msgid ""
"https://github.com/rancher/elemental-operator/blob/main/chart/values."
"yaml[The values.yaml file have some variables interesting to see]"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:36
msgid ""
"After a few seconds you should see the operator pod appear on the `cattle-"
"elemental-system` namespace:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:37
#, no-wrap
msgid ""
"kubectl get pods -n cattle-elemental-system\n"
"NAME                                  READY   STATUS    RESTARTS   AGE\n"
"elemental-operator-64f88fc695-b8qhn   1/1     Running   0          16s\n"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:38
#, no-wrap
msgid "Kubernetes resources"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:39
msgid ""
"Based on the https://elemental.docs.rancher.com/quickstart-cli[Elemental "
"quickstart] guide, a few Kubernetes resources need to be created."
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:40
msgid ""
"It is out of the scope of this document to provide an explanation about the "
"resources managed by Elemental, however the https://elemental.docs.rancher."
"com/machineregistration-reference[official documentation] explains all those "
"in good detail."
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:41
msgid ""
"In order to deploy more than one elemental machine, be sure that `spec."
"config.elemental.registration.emulated-tpm-seed=-1` is set in your "
"`MachineRegistration` so the seed used for the TPM emulation is randomized "
"per machine. Otherwise, you will get the same TPM Hash for all deployed "
"machines and only the last one to be registered will be valid. See the "
"official docs for http://elemental.docs.rancher.com/tpm[tpm] and http://"
"elemental.docs.rancher.com/machineregistration-reference/"
"#configelementalregistration[machineregistration] for more information."
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:42
#, no-wrap
msgid ""
"cat <<- EOF | kubectl apply -f -\n"
"apiVersion: elemental.cattle.io/v1beta1\n"
"kind: MachineInventorySelectorTemplate\n"
"metadata:\n"
"  name: my-machine-selector\n"
"  namespace: fleet-default\n"
"spec:\n"
"  template:\n"
"    spec:\n"
"      selector:\n"
"        matchExpressions:\n"
"          - key: location\n"
"            operator: In\n"
"            values: [ 'europe' ]\n"
"EOF\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:43
#, no-wrap
msgid ""
"cat <<- EOF | kubectl apply -f -\n"
"kind: Cluster\n"
"apiVersion: provisioning.cattle.io/v1\n"
"metadata:\n"
"  name: my-cluster\n"
"  namespace: fleet-default\n"
"spec:\n"
"  rkeConfig:\n"
"    machineGlobalConfig:\n"
"      etcd-expose-metrics: false\n"
"      profile: null\n"
"    machinePools:\n"
"      - controlPlaneRole: true\n"
"        etcdRole: true\n"
"        machineConfigRef:\n"
"          apiVersion: elemental.cattle.io/v1beta1\n"
"          kind: MachineInventorySelectorTemplate\n"
"          name: my-machine-selector\n"
"        name: pool1\n"
"        quantity: 1\n"
"        unhealthyNodeTimeout: 0s\n"
"        workerRole: true\n"
"    machineSelectorConfig:\n"
"      - config:\n"
"          protect-kernel-defaults: false\n"
"    registries: {}\n"
"  kubernetesVersion: v1.24.8+k3s1\n"
"EOF\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:44
#, no-wrap
msgid ""
"cat <<- 'EOF' | kubectl apply -f -\n"
"apiVersion: elemental.cattle.io/v1beta1\n"
"kind: MachineRegistration\n"
"metadata:\n"
"  name: my-nodes\n"
"  namespace: fleet-default\n"
"spec:\n"
"  config:\n"
"    cloud-config:\n"
"      users:\n"
"        - name: root\n"
"          passwd: root\n"
"    elemental:\n"
"      install:\n"
"        reboot: true\n"
"        device: /dev/vda\n"
"        debug: true\n"
"        disable-boot-entry: true\n"
"      registration:\n"
"        emulate-tpm: true\n"
"        emulated-tpm-seed: -1\n"
"  machineInventoryLabels:\n"
"    manufacturer: \"${System Information/Manufacturer}\"\n"
"    productName: \"${System Information/Product Name}\"\n"
"    serialNumber: \"${System Information/Serial Number}\"\n"
"    machineUUID: \"${System Information/UUID}\"\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:45
msgid ""
"This creates a `MachineRegistration` object which will provide a unique URL "
"which will be used with `elemental-register` to register the node during "
"installation, so the operator can create a `MachineInventory` which will be "
"using to bootstrap the node. See that the label has been see to match the "
"selector here already, although it can always be added later to the "
"`MachineInventory`."
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:46
#, no-wrap
msgid "cluster-ui.png"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:47
msgid ""
"At this point the x86_64 and ARM64 quickstart differs because for x86_64 "
"there is a `SeedImage` object that needs to be created and that doesn't "
"exist for ARM64 (yet)."
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:48
#, no-wrap
msgid "Preparing the installation image"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:49
msgid ""
"Elemental's support for Raspberry Pi is primarily for demonstration purposes "
"at this point. Therefore the installation process is modelled similar to "
"x86-64. You boot from a seed image (USB stick in this case) and install to a "
"storage medium (SD-card for Raspberry Pi)."
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:50
msgid ""
"The steps below should to be ran in a linux machine (`SLE Micro` for "
"example)."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:51
msgid ""
"First step is to download the `machineregistration` object that will "
"instruct where to get the config for the node to be installed:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:52
#, no-wrap
msgid ""
"curl -k $(kubectl get machineregistration -n fleet-default my-nodes \\\n"
" -o jsonpath=\"{.status.registrationURL}\") -o livecd-cloud-config.yaml\n"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:53
#, no-wrap
msgid "registration-endpoint.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:54
msgid ""
"Then, the `rpi.raw` image is downloaded and checked the integrity just to be "
"safe:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:55
#, no-wrap
msgid ""
"curl -Lk https://download.opensuse.org/repositories/isv:/Rancher:/Elemental:/Stable:/Teal53/images/rpi.raw -o rpi.raw\n"
"curl -Lk https://download.opensuse.org/repositories/isv:/Rancher:/Elemental:/Stable:/Teal53/images/rpi.raw.sha256 -o rpi.raw.sha256\n"
"sha256sum -c rpi.raw.sha256\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:56
msgid ""
"Finally, the `livecd-cloud-config.yaml` file is injected in the vanilla `rpi."
"raw` image:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:57
#, no-wrap
msgid ""
"IMAGE=rpi.raw\n"
"DEST=$(mktemp -d)\n"
"SECTORSIZE=$(sfdisk -J ${IMAGE} | jq '.partitiontable.sectorsize')\n"
"DATAPARTITIONSTART=$(sfdisk -J ${IMAGE} | jq '.partitiontable.partitions[1].start')\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:58
#, no-wrap
msgid ""
"mount -o rw,loop,offset=$((${SECTORSIZE}*${DATAPARTITIONSTART})) ${IMAGE} ${DEST}\n"
"mv livecd-cloud-config.yaml ${DEST}/livecd-cloud-config.yaml\n"
"umount ${DEST}\n"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:59
msgid ""
"The `rpi.raw` image has two partitions. `RPI_BOOT` contains the boot loader "
"files and `COS_LIVE` the Elemental files, where the `livecd-cloud-config."
"yaml` file needs to be copied."
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:60
#, no-wrap
msgid "UTM VM"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:61
msgid ""
"Then, a new UTM VM needs to be created and the `rpi.raw` file configured as "
"USB."
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:62
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:79
#, no-wrap
msgid "utm-welcome.png"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:63
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:81
#, no-wrap
msgid "utm-start.png"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:64
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:83
#, no-wrap
msgid "utm-os.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:65
msgid "Map the raw file as an ISO and configure the hardware as you please:"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:66
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:87
#, no-wrap
msgid "utm-hardware.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:67
msgid "Set a proper name:"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:68
#, no-wrap
msgid "utm-elemental-vm.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:69
msgid "Finally, it is needed to configure the raw disk as USB:"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:70
#, no-wrap
msgid "usb-config-elemental.png"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:71
#, no-wrap
msgid "usb-config-order-elemental.png"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:72
msgid ""
"The operating system disk device should be the first one, then the USB, so "
"the USB will boot just once as a fallback."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:73
msgid "After a while, a new `machineinventory` host will be present:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:74
#, no-wrap
msgid "kubectl get machineinventory -n fleet-default m-ed0a3f46-d6f8-4737-9884-e3a898094994 -o yaml\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:75
#, no-wrap
msgid ""
"apiVersion: elemental.cattle.io/v1beta1\n"
"kind: MachineInventory\n"
"metadata:\n"
"  annotations:\n"
"    elemental.cattle.io/registration-ip: 192.168.205.106\n"
"  creationTimestamp: \"2023-05-03T14:04:56Z\"\n"
"  generation: 1\n"
"  labels:\n"
"    machineUUID: ec49ff2a-e14f-42bf-8098-4162f14ee1f9\n"
"    manufacturer: QEMU\n"
"    productName: QEMU-Virtual-Machine\n"
"    serialNumber: Not-Specified\n"
"  name: m-ed0a3f46-d6f8-4737-9884-e3a898094994\n"
"  namespace: fleet-default\n"
"  resourceVersion: \"15848\"\n"
"  uid: 79608121-034d-4d64-8b48-6624607bbadd\n"
"spec:\n"
"  tpmHash: a2e5b231dac4e90151454e2ebc76a6b118f7d1b826b810d22868b2d09b38b7f7\n"
"status:\n"
"  conditions:\n"
"  - lastTransitionTime: \"2023-05-03T14:07:45Z\"\n"
"    message: plan successfully applied\n"
"    reason: PlanSuccessfullyApplied\n"
"    status: \"True\"\n"
"    type: Ready\n"
"  - lastTransitionTime: \"2023-05-03T14:04:56Z\"\n"
"    message: Waiting to be adopted\n"
"    reason: WaitingToBeAdopted\n"
"    status: \"False\"\n"
"    type: AdoptionReady\n"
"  plan:\n"
"    checksum: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a\n"
"    secretRef:\n"
"      name: m-ed0a3f46-d6f8-4737-9884-e3a898094994\n"
"      namespace: fleet-default\n"
"    state: Applied\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:76
msgid ""
"Finally, labeling the `machineinventory` of the discovered new host will "
"trigger the installation:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:77
#, no-wrap
msgid ""
"kubectl -n fleet-default label machineinventory $(kubectl get \\\n"
" machineinventory -n fleet-default --no-headers \\\n"
" -o custom-columns=\":metadata.name\") location=europe\n"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:78
#, no-wrap
msgid "new-cluster.png"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:79
#, no-wrap
msgid ""
"kubectl get cluster -n fleet-default\n"
"NAME         READY   KUBECONFIG\n"
"my-cluster   true    my-cluster-kubeconfig\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:80
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:116
msgid "Profit!"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:81
#, no-wrap
msgid ""
"kubectl get secret -n fleet-default my-cluster-kubeconfig \\\n"
"  -o jsonpath='{.data.value}' | base64 -d >> ~/my-cluster-kubeconfig\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:82
#, no-wrap
msgid ""
"KUBECONFIG=~/my-cluster-kubeconfig kubectl get nodes\n"
"NAME                                     STATUS   ROLES                              AGE     VERSION\n"
"m-ed0a3f46-d6f8-4737-9884-e3a898094994   Ready    control-plane,etcd,master,worker   6m25s   v1.24.8+k3s1\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:83
#, no-wrap
msgid ""
"KUBECONFIG=~/my-cluster-kubeconfig kubectl get pods -A\n"
"NAMESPACE             NAME                                                              READY   STATUS      RESTARTS   AGE\n"
"cattle-fleet-system   fleet-agent-7ffcdff7c5-2rvvl                                      1/1     Running     0          2m47s\n"
"cattle-system         apply-system-agent-upgrader-on-m-ed0a3f46-d6f8-4737-9884-1jhpkx   0/1     Completed   0          2m1s\n"
"cattle-system         cattle-cluster-agent-684c4687c8-scgvb                             1/1     Running     0          61s\n"
"cattle-system         helm-operation-hjkcr                                              0/2     Completed   0          5m35s\n"
"cattle-system         rancher-webhook-85bb446df8-r8g6r                                  1/1     Running     0          5m22s\n"
"cattle-system         system-upgrade-controller-65bcf49944-rp2gr                        1/1     Running     0          2m47s\n"
"kube-system           coredns-7b5bbc6644-2zdlk                                          1/1     Running     0          6m20s\n"
"kube-system           helm-install-traefik-crd-ksm4q                                    0/1     Completed   0          61s\n"
"kube-system           helm-install-traefik-kg4qv                                        0/1     Completed   0          61s\n"
"kube-system           local-path-provisioner-687d6d7765-j54vp                           1/1     Running     0          6m20s\n"
"kube-system           metrics-server-84f8d4c4fc-6t6kc                                   1/1     Running     0          6m20s\n"
"kube-system           svclb-traefik-7ca8393f-gvdcc                                      2/2     Running     0          5m58s\n"
"kube-system           traefik-6b8f69d897-bwtgq                                          1/1     Running     0          5m58s\n"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/elemental-utm-aarch64.adoc:84
#, no-wrap
msgid "new-cluster-dashboard.png"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:1
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:8
#, no-wrap
msgid "K3s on SLE Micro"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:2
#, no-wrap
msgid "Intro"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:3
msgid ""
"https://k3s.io/[K3s] is a highly available, certified Kubernetes "
"distribution designed for production workloads in unattended, resource-"
"constrained, remote locations or inside IoT appliances."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:4
msgid ""
"It is packaged as a single and small binary so installations and updates are "
"fast and easy."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:5
msgid ""
"The installation procedure can be as simple as downloading the `k3s` binary "
"and run it.  However, the preferred way is to use the install script as it "
"creates and configures a service."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:6
msgid ""
"The script supports different installation parameters to customize K3s, "
"including HA support, install control-plane nodes, dedicated etcd nodes, "
"agents, etc."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:7
msgid ""
"Once installed, the parameters and flags can be modified, added or removed "
"just by changing the systemd unit file or the config file and restarting the "
"service. Neat!"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:9
msgid ""
"The installation scripts supports SLE Micro, it recognizes the underlying "
"operating system, installs the `k3s-selinux` package using `transactional-"
"updates` and creates the `k3s` or `k3s-agent` services."
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:10
msgid ""
"On SLE Micro, the install script doesn't start the `k3s` or `k3s-agent` "
"service (ideally you should reboot the host once you run a transactional-"
"update), but this can be override by using the "
"`INSTALL_K3S_SKIP_START=false` environment variable."
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:11
#, no-wrap
msgid "K3s all-in-one"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:12
msgid ""
"The simplest way to run K3s is an all-in-one server (not suited for "
"production environments) is by running:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:13
#, no-wrap
msgid "curl -sfL https://get.k3s.io | sh -\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:14
msgid ""
"A few environment variables to tweak our installation can be used as well as:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:15
#, no-wrap
msgid ""
"curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server \\\n"
" --cluster-init --write-kubeconfig-mode=644\" K3S_TOKEN=foobar sh -\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:16
msgid ""
"https://docs.k3s.io/installation/configuration#configuration-with-install-"
"script[The settings can be specified either as environment variables, "
"command line flags], a https://docs.k3s.io/installation/"
"configuration#configuration-file[configuration file], or both, it is just a "
"personal choice:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:17
#, no-wrap
msgid ""
"curl -sfL https://get.k3s.io | sh -s - server --token foobar \\\n"
" --cluster-init --write-kubeconfig-mode=644\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:18
#, no-wrap
msgid ""
"write-kubeconfig-mode: \"0644\"\n"
"cluster-init: true\n"
"token: \"foobar\"\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:19
msgid "In this example:"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:20
msgid "`write-kubeconfig-mode` is self explanatory (the default is 0600)"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:21
msgid ""
"`cluster-init` enables clustering by deploying an embedded etcd database"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:22
msgid ""
"`token` a random token is generated to be able to add nodes to the cluster, "
"specifying it at installation time makes things easier as it is known upfront"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:23
msgid ""
"The https://docs.k3s.io/cli[official] documentation explains all the flags "
"in detail."
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:24
#, no-wrap
msgid "Adding agents"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:25
msgid ""
"Adding an agent is as simple as running the install script with a few "
"parameters, including the URL of the cluster as:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:26
#, no-wrap
msgid ""
"curl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 \\\n"
" K3S_TOKEN=foobar sh -\n"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:27
#, no-wrap
msgid "K3s HA"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:28
msgid ""
"The easiest way to run a K3s HA cluster is by installing a first node using "
"the `--cluster-init` flag and then, start adding nodes."
msgstr ""

#. type: Labeled list
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:29
#, no-wrap
msgid "First node"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:30
#, no-wrap
msgid ""
"curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server --cluster-init \\\n"
" --write-kubeconfig-mode=644\" K3S_TOKEN=foobar sh -\n"
msgstr ""

#. type: Labeled list
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:31
#, no-wrap
msgid "Rest of the nodes"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:32
#, no-wrap
msgid ""
"curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server \\\n"
" --server https://myserver:6443 --write-kubeconfig-mode=644\" \\\n"
" K3S_TOKEN=foobar sh -\n"
msgstr ""

#. type: Labeled list
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:33
#, no-wrap
msgid "Agent nodes"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:34
#, no-wrap
msgid ""
"curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"agent \\\n"
" --server https://myserver:6443\" K3S_TOKEN=foobar sh -\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:35
msgid ""
"This is what a cluster with 3 control-plane nodes and 2 agents looks like:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:36
#, no-wrap
msgid ""
"NAME   STATUS   ROLES                       AGE     VERSION        INTERNAL-IP       EXTERNAL-IP   OS-IMAGE                          KERNEL-VERSION                 CONTAINER-RUNTIME\n"
"cp01   Ready    control-plane,etcd,master   2m26s   v1.26.4+k3s1   192.168.205.99    <none>        SUSE Linux Enterprise Micro 5.4   5.14.21-150400.24.46-default   containerd://1.6.19-k3s1\n"
"cp02   Ready    control-plane,etcd,master   98s     v1.26.4+k3s1   192.168.205.100   <none>        SUSE Linux Enterprise Micro 5.4   5.14.21-150400.24.46-default   containerd://1.6.19-k3s1\n"
"cp03   Ready    control-plane,etcd,master   71s     v1.26.4+k3s1   192.168.205.101   <none>        SUSE Linux Enterprise Micro 5.4   5.14.21-150400.24.46-default   containerd://1.6.19-k3s1\n"
"w01    Ready    <none>                      63s     v1.26.4+k3s1   192.168.205.102   <none>        SUSE Linux Enterprise Micro 5.4   5.14.21-150400.24.46-default   containerd://1.6.19-k3s1\n"
"w02    Ready    <none>                      39s     v1.26.4+k3s1   192.168.205.103   <none>        SUSE Linux Enterprise Micro 5.4   5.14.21-150400.24.46-default   containerd://1.6.19-k3s1\n"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:37
#, no-wrap
msgid "K3s API HA"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:38
msgid ""
"The previous section lacks an important detail, the Kubernetes API is served "
"by the 3 control-plane nodes, but the API certificate is generated just for "
"the first node. If the first node is down, the clients needs their API "
"endpoint to be tweaked to point to another node (i.e.- for `kubectl`, using "
"the `-s` flag or modifying the `kubeconfig` file) and the certificate won't "
"be accepted as it doesn't contain the IP/hostname of that other node (it can "
"be forced to be ignored using `--insecure-skip-tls-verify=true` for "
"`kubectl` but that's not a good practice)."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:39
msgid ""
"Ideally a mechanism to expose the K3s API in a high availability scenario is "
"required. This usually means running a load balancer outside of the K3s "
"cluster to serve and redirect the requests to the K3s API endpoints, so if "
"one of the servers fail, the load balancer will re-route the requests to the "
"other ones. This solves the HA problem but it adds complexity as it requires "
"an external service, which sometimes is not available (typically in non-"
"cloud environments such as bare metal deployments)."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:40
msgid ""
"One approach can be to run a self-contained solution involving http://kube-"
"vip.io/[kube-vip] to expose the https://kube-vip.io/docs/usage/k3s/[K3s API] "
"over a virtual IP (optionally including a load balancer as well). This "
"solves the HA problem but the certificate can still be a problem... but K3s "
"got you covered. By using the `--tls-san` flag at K3s installation time, a "
"list of IPs and/or hostnames can be provided for the certificate to be "
"included as Subject Alternative Names, meaning the K3s API will be happily "
"served from those IPs/hostnames, and if those are the ones being served by "
"the VIP, the solution is now HA and certificate-proof! Let's see it in more "
"detail in the next section."
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:41
msgid ""
"kube-vip can be used also to expose Kubernetes services, but this is out of "
"scope of this document."
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:42
#, no-wrap
msgid "VIP reservation"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:43
msgid ""
"The VIP needs to be an IP available in the same subnet than the one where "
"the control plane hosts are running (this is technically not true for the "
"VIP itself but for https://kube-vip.io/docs/about/architecture/"
"#technologies[load-balancing])."
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:44
msgid ""
"If you are using OSX to virtualize the SLE Micro OS where K3s is going to be "
"installed, you can see the dhcp leases in the `/var/db/dhcpd_leases` file "
"and the subnet range in the `/Library/Preferences/SystemConfiguration/com."
"apple.vmnet.plist` one. You can use a free IP in that range, but if you find "
"a way to reserve an IP in that range, please open a GitHub issue or a pull "
"request with instructions to do it!."
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:45
#, no-wrap
msgid "K3s installation - First node"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:46
msgid ""
"The first step is to install K3s in HA and using the `--tls-san` flag as "
"well. This flag can be repeated many times, so in this example will be used "
"to add both the IP (`192.168.205.10` in this example) and the DNS name of "
"the VIP (using https://sslip.io[sslip.io] as a poor's man DNS):"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:47
#, no-wrap
msgid ""
"curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server --cluster-init \\\n"
" --write-kubeconfig-mode=644 --tls-san=192.168.205.10 \\\n"
" --tls-san=https://192.168.205.10.sslip.io\" K3S_TOKEN=foobar sh -\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:48
msgid ""
"The rest of the nodes will be installed after kube-vip as the server URL for "
"them to join the cluster will be the VIP."
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:49
#, no-wrap
msgid "Kube-vip installation"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:50
msgid ""
"The official https://kube-vip.io/docs/usage/k3s/[kube-vip] documentation "
"explains the steps in more detail, but essentially it means creating the "
"required resource files for kube-vip to run (RBAC and a DaemonSet)."
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:51
msgid ""
"IPVS modules must be loaded in order for the https://kube-vip.io/docs/about/"
"architecture/#control-plane-load-balancing[load balancer feature] to work.  "
"This is achieved by creating the following file:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:52
#, no-wrap
msgid ""
"cat <<- EOF > /etc/modules-load.d/ipvs.conf\n"
"ip_vs\n"
"ip_vs_rr\n"
"ip_vs_wrr\n"
"ip_vs_sh\n"
"nf_conntrack\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:53
msgid ""
"Configurations stored under `/etc/modules-load.d` will be automatically "
"picked up and loaded on boot.  Loading them for the first time, however, can "
"be achieved without rebooting by executing:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:54
#, no-wrap
msgid "for i in $(cat /etc/modules-load.d/ipvs.conf); do modprobe ${i}; done\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:55
msgid ""
"The Kubernetes resources can be created by leveraging https://docs.k3s.io/"
"installation/packaged-components#auto-deploying-manifests-addons[K3s auto-"
"deploy] feature (aka. any manifest stored in a particular folder of the host "
"`/var/lib/rancher/k3s/server/manifests` will be automatically deployed at "
"the K3s service startup or when the file changes via something similar to "
"`kubectl apply -f`)."
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:56
msgid "In this case, the `--services` flag for kube-vip won't be used."
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:57
#, no-wrap
msgid ""
"export VIP=192.168.205.10\n"
"cat <<- EOF > /var/lib/rancher/k3s/server/manifests/kube-vip.yaml\n"
"apiVersion: v1\n"
"kind: ServiceAccount\n"
"metadata:\n"
"  name: kube-vip\n"
"  namespace: kube-system\n"
"---\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:58
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: ClusterRole\n"
"metadata:\n"
"  annotations:\n"
"    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n"
"  name: system:kube-vip-role\n"
"rules:\n"
"  - apiGroups: [\"\"]\n"
"    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n"
"    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n"
"  - apiGroups: [\"coordination.k8s.io\"]\n"
"    resources: [\"leases\"]\n"
"    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n"
"---\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:59
#, no-wrap
msgid ""
"kind: ClusterRoleBinding\n"
"apiVersion: rbac.authorization.k8s.io/v1\n"
"metadata:\n"
"  name: system:kube-vip-binding\n"
"roleRef:\n"
"  apiGroup: rbac.authorization.k8s.io\n"
"  kind: ClusterRole\n"
"  name: system:kube-vip-role\n"
"subjects:\n"
"- kind: ServiceAccount\n"
"  name: kube-vip\n"
"  namespace: kube-system\n"
"---\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:60
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: DaemonSet\n"
"metadata:\n"
"  labels:\n"
"    app.kubernetes.io/name: kube-vip-ds\n"
"    app.kubernetes.io/version: v0.5.12\n"
"  name: kube-vip-ds\n"
"  namespace: kube-system\n"
"spec:\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/name: kube-vip-ds\n"
"  template:\n"
"    metadata:\n"
"      labels:\n"
"        app.kubernetes.io/name: kube-vip-ds\n"
"        app.kubernetes.io/version: v0.5.12\n"
"    spec:\n"
"      affinity:\n"
"        nodeAffinity:\n"
"          requiredDuringSchedulingIgnoredDuringExecution:\n"
"            nodeSelectorTerms:\n"
"            - matchExpressions:\n"
"              - key: node-role.kubernetes.io/master\n"
"                operator: Exists\n"
"            - matchExpressions:\n"
"              - key: node-role.kubernetes.io/control-plane\n"
"                operator: Exists\n"
"      containers:\n"
"      - args:\n"
"        - manager\n"
"        env:\n"
"        - name: vip_arp\n"
"          value: \"true\"\n"
"        - name: port\n"
"          value: \"6443\"\n"
"        - name: vip_interface\n"
"          value: eth0\n"
"        - name: vip_cidr\n"
"          value: \"32\"\n"
"        - name: cp_enable\n"
"          value: \"true\"\n"
"        - name: cp_namespace\n"
"          value: kube-system\n"
"        - name: vip_ddns\n"
"          value: \"false\"\n"
"        - name: vip_leaderelection\n"
"          value: \"true\"\n"
"        - name: vip_leaseduration\n"
"          value: \"5\"\n"
"        - name: vip_renewdeadline\n"
"          value: \"3\"\n"
"        - name: vip_retryperiod\n"
"          value: \"1\"\n"
"        - name: address\n"
"          value: ${VIP}\n"
"        - name: prometheus_server\n"
"          value: :2112\n"
"        - name: lb_enable\n"
"          value: \"true\"\n"
"        image: ghcr.io/kube-vip/kube-vip:v0.5.12\n"
"        imagePullPolicy: Always\n"
"        name: kube-vip\n"
"        securityContext:\n"
"          capabilities:\n"
"            add:\n"
"            - NET_ADMIN\n"
"            - NET_RAW\n"
"      hostNetwork: true\n"
"      serviceAccountName: kube-vip\n"
"      tolerations:\n"
"      - effect: NoSchedule\n"
"        operator: Exists\n"
"      - effect: NoExecute\n"
"        operator: Exists\n"
"EOF\n"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:61
#, no-wrap
msgid "K3s installation - Control-plane nodes"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:62
msgid ""
"Once kube-vip is in place, the rest of the control-plane nodes can be added "
"to the cluster by pointing them to the VIP as:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:63
#, no-wrap
msgid ""
"export VIP=192.168.205.10\n"
"curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server \\\n"
" --server https://${VIP}:6443 --write-kubeconfig-mode=644\" K3S_TOKEN=foobar sh -\n"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:64
msgid ""
"For a real HA scenario, it is required for `etcd` to have an odd number of "
"nodes, so it would be required to add two more control plane nodes."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:65
msgid ""
"After a while, the nodes will join the cluster successfully and an HA "
"cluster will be ready."
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:66
#, no-wrap
msgid "Kubeconfig tweaks"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:67
msgid ""
"The kubeconfig file that is generated as part of the installation has "
"localhost as the Kubernetes API endpoint, so in order to use it from "
"outside, it needs to be changed to the VIP as:"
msgstr ""

#. type: Labeled list
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:68
#, no-wrap
msgid "SUSE"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:69
#, no-wrap
msgid ""
"scp 192.168.205.10:/etc/rancher/k3s/k3s.yaml ~/.kube/config && \\\n"
" sed -i 's/127.0.0.1/192.168.205.10/g' ~/.kube/config && \\\n"
" chmod 600 ~/.kube/config\n"
msgstr ""

#. type: Labeled list
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:70
#, no-wrap
msgid "MacOS"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:71
#, no-wrap
msgid ""
"scp 192.168.205.10:/etc/rancher/k3s/k3s.yaml ~/.kube/config && \\\n"
" sed -i '' 's/127.0.0.1/192.168.205.10/g' ~/.kube/config \\\n"
" && chmod 600 ~/.kube/config\n"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:72
#, no-wrap
msgid "K3s installation - adding agents"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:73
msgid "Agents can be added as usual, pointing to the VIP address as:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:74
#, no-wrap
msgid ""
"export VIP=192.168.205.10\n"
"curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"agent \\\n"
" --server https://${VIP}:6443\" K3S_TOKEN=foobar sh -\n"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:75
#, no-wrap
msgid "Final picture"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:76
#, no-wrap
msgid ""
"kubectl get nodes -o jsonpath=\"{.items[*].status.addresses[?(@.type=='InternalIP')].address}\"\n"
"192.168.205.69 192.168.205.70 192.168.205.71 192.168.205.72 192.168.205.73%\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:77
#, no-wrap
msgid ""
"kubectl cluster-info\n"
"Kubernetes control plane is running at https://192.168.205.10:6443\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:78
msgid ""
"As you can see, the control plane IP is the VIP and the nodes have their own "
"IP. Sweet!"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:79
#, no-wrap
msgid "K3s tips"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:80
#, no-wrap
msgid "Access Traefik dashboard"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:81
#, no-wrap
msgid ""
"kubectl port-forward $(kubectl get pods \\\n"
" --selector \"app.kubernetes.io/name=traefik\" -o=name -n kube-system) \\\n"
" -n kube-system 9000:9000\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:82
msgid ""
"Then, browse http://localhost:9000/dashboard to observe the Traefik "
"dashboard:"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/k3s-on-slemicro.adoc:83
#, no-wrap
msgid "traefikdashboard.png"
msgstr ""

#. type: Title =
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:1
#, no-wrap
msgid "SLE Micro on OSX on Apple Silicon (UTM)"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:2
#, no-wrap
msgid "OSX Virtualization"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:3
msgid ""
"Virtualization of Linux hosts on OSX can be achieved with various tools.  "
"There are commercial products such as VMWare Fusion or Parallels Desktop as "
"well as open-source projects such as VirtualBox, UTM or Lima."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:4
msgid ""
"UTM is an OSX application that uses QEMU under the hood and offers a GUI to "
"manage the VM lifecycle. It supports Apple silicon CPUs, and it can use "
"native OSX virtualization (Virtualization.framework) as well. It also has a "
"scripting interface via https://docs.getutm.app/scripting/scripting/[Apple "
"Script] to automate some processes and a proper CLI (utmctl) is on the works."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:5
msgid ""
"Lima is based on QEMU (experimental support for Virtualization.framework) as "
"well and it launches Linux virtual machines with automatic file sharing and "
"port forwarding (like WSL2), and containerd. Lima is expected to be used on "
"macOS hosts, but can be used on Linux hosts as well. Lima has a proper CLI "
"tool (limactl) and the best part is VMs can be defined in yaml files, so you "
"can even deploy K8s clusters with just a single command (see https://github."
"com/lima-vm/lima/blob/master/examples/k8s.yaml)"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:6
msgid ""
"Rancher desktop is https://github.com/rancher-sandbox/rancher-desktop/"
"issues/3702[based on Lima]"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:7
msgid ""
"However, Lima doesn't support SLE Micro (https://github.com/lima-vm/lima/"
"issues/1456[yet]) as Lima customizes the VM at boot to install some packages "
"and services and SLE Micro uses a different approach to those things (for "
"example as it is immutable, it requires installing packages using ignition/"
"combustion)"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:8
#, no-wrap
msgid "SLE Micro installation automation: ISO vs Image"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:9
msgid ""
"SLE Micro can be installed traditionally using an ISO file that boots once "
"and using click-ops you can customize it as you wish (see https://"
"documentation.suse.com/sle-micro/5.3/single-html/SLE-Micro-deployment/#cha-"
"install)  but that won't be useful."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:10
msgid ""
"ISO installation can be customized using boot parameters (see https://"
"documentation.suse.com/sle-micro/5.3/single-html/SLE-Micro-deployment/#sec-"
"boot-parameters-list)  but those don't cover all the options. However, ISO "
"based installation supports using AutoYaST (see https://documentation.suse."
"com/sle-micro/5.3/single-html/SLE-Micro-autoyast/)  to automate the "
"installation process."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:11
msgid ""
"SLE Micro can be also deployed using pre-built images. Currently, there are "
"two types of images available: raw disk images and selfinstall ISOs."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:12
msgid ""
"SLE Micro raw images are delivered for the AMD64/Intel 64 architecture, IBM "
"Z ZSeries and also AArch64, however the selfinstall images are currently "
"delivered only for the AMD64/Intel 64 architecture. The pre-built images "
"(both selfinstall ISOs and raw disk images) are intended to be configured on "
"the first boot by using either Ignition or Combustion."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:13
msgid ""
"_To summarize_, the two ways as of today to deploy SLE Micro on Aarch64 on "
"an automated fashion would be using the ISO + AutoYaST or raw images + "
"Ignition/Combustion."
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:14
#, no-wrap
msgid "Ignition vs Butane vs Combustion"
msgstr ""

#. type: Labeled list
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:15
#, no-wrap
msgid "Ignition"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:16
msgid ""
"is a provisioning tool that enables you to configure a system according to "
"your specification on the first boot. When the system is booted for the "
"first time, Ignition is loaded as part of an initramfs and searches for a "
"configuration file within a specific directory (on a USB flash disk, or you "
"can provide a URL). All changes are performed before the kernel switches "
"from the temporal file system to the real root file system (before the "
"switch_root command is issued).  Ignition uses a configuration file in the "
"JSON format. The file is called config.ign. SLE Micro supports https://"
"coreos.github.io/ignition/configuration-v3_3/[Ignition config spec 3.3.0] "
"(see https://documentation.suse.com/sle-micro/5.3/single-html/SLE-Micro-"
"deployment/#sec-ignition-configuration for more information)."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:17
msgid ""
"Ignition files can be complex to generate manually (specially for the file "
"permissions syntax in hex or multiline things) so you can use https://"
"opensuse.github.io/fuel-ignition/[opensuse.github.io/fuel-ignition] to help "
"you generate a basic one."
msgstr ""

#. type: Labeled list
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:18
#, no-wrap
msgid "Butane"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:19
msgid ""
"is a more human readable (and writable) configuration syntax based on yaml "
"that can be translated to Ignition easily with the https://coreos.github.io/"
"butane/[butane CLI] as Butane is not consumable by Ignition."
msgstr ""

#. type: Labeled list
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:20
#, no-wrap
msgid "Combustion"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:21
msgid ""
"is a dracut module that enables you to configure your system on its first "
"boot. Combustion reads a provided file called `script` and executes commands "
"in it and thus performs changes to the file system. You can use Combustion "
"to change the default partitions, set users' passwords, create files, "
"install packages, etc."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:22
msgid ""
"The Combustion dracut module is invoked after the `ignition.firstboot` "
"argument is passed to the kernel command line. Combustion then reads the "
"configuration from script. Combustion tries to configure the network, if the "
"network flag has been found in script. After `/sysroot` is mounted, "
"Combustion tries to activate all mount points in `/etc/fstab` and then call "
"`transactional-update` to apply other changes (like setting root password or "
"installing packages).  See https://documentation.suse.com/sle-micro/5.3/"
"single-html/SLE-Micro-deployment/#sec-combustion-script for more information."
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:23
#, no-wrap
msgid "Ignition/Combustion and UTM"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:24
msgid ""
"Ignition and Combustion are intended to automate the deployment of SLE Micro "
"systems. To use them with UTM there are a couple of alternatives:"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:25
msgid ""
"Use the QEMU `fw_cfg` flag as `-fw_cfg name=opt/org.opensuse.combustion/"
"script,file=/var/combustion-script` for combustion or `-fw_cfg name=opt/com."
"coreos/config,file=PATH_TO_config.ign` for ignition"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:26
msgid ""
"Create a raw disk or ISO file to host the Ignition or Combustion (or both) "
"files."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:27
msgid ""
"For Ignition, the configuration file `config.ign` must reside in the "
"`ignition` subdirectory on the configuration media labeled `ignition`. The "
"directory structure must look as follows:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:28
#, no-wrap
msgid ""
"<root directory>\n"
"└── ignition\n"
"    └── config.ign\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:29
msgid ""
"For Combustion, the configuration device needs to be named `combustion`, a "
"specific directory structure in that configuration medium needs to be "
"created and include a configuration file named `script`. In the root "
"directory of the configuration medium, create a directory called "
"`combustion` and place the `script` into this directory along with other "
"files--SSH key, configuration files, etc. The directory structure then "
"should look as follows:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:30
#, no-wrap
msgid ""
"<root directory>\n"
"└── combustion\n"
"    └── script\n"
"    └── other files\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:31
msgid ""
"Combustion can be used along with Ignition. If you intend to do so, label "
"your configuration medium `ignition` and include the `ignition` directory "
"with the `config.ign` to your directory structure as shown below:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:32
#, no-wrap
msgid ""
"<root directory>\n"
"└── combustion\n"
"    └── script\n"
"    └── other files\n"
"└── ignition\n"
"    └── config.ign\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:33
msgid "In this scenario, Ignition runs before Combustion."
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:34
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:8
#, no-wrap
msgid "Image-based process step by step"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:35
msgid ""
"There is a helper script that automates all the steps included https://"
"github.com/suse-edge/misc/blob/main/slemicro/create_vm.sh[here]."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:37
msgid "SLE Micro raw image"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:38
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:10
msgid ""
"Download the raw image file from the SUSE website at https://www.suse.com/"
"download/sle-micro/"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:39
msgid "Select ARM architecture"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:40
msgid ""
"Look for the raw file (I.e.- `SLE-Micro.aarch64-5.3.0-Default-GM.raw.xz`)"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:41
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:13
msgid ""
"You need to have a valid user on the SUSE site to be able to download the "
"file."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:42
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:15
msgid ""
"Access to https://scc.suse.com/[SCC.suse.com] to generate a registration code"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:43
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:16
msgid ""
"Search for `SUSE Linux Enterprise Micro` via the `Products` menu, select the "
"arch/version then copy and manually activate the registration code"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:44
msgid "Butane, qemu and cdrtools installed (using brew for example)"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:45
#, no-wrap
msgid "brew install butane cdrtools qemu\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:46
msgid "UTM installed (using brew for example)"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:47
#, no-wrap
msgid "brew install --cask utm\n"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:48
msgid ""
"If using the previous script, it is required to install UTM 4.2.2 at least "
"as it includes the proper support for the automation."
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:49
#, no-wrap
msgid "Image preparation"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:50
msgid "Uncompress the SLE Micro image"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:51
#, no-wrap
msgid "xz -d ~/Downloads/SLE-Micro.*-Default-GM.raw.xz\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:52
msgid "Move the file to a proper location and rename it to fit the VM hostname"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:53
#, no-wrap
msgid "cp ~/Downloads/SLE-Micro.*-Default-GM.raw ~/VMs/slemicro.raw\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:54
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:21
msgid "Resize the image file. In this example, to 30G"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:55
#, no-wrap
msgid "qemu-img resize -f raw ~/VMs/slemicro.raw 30G > /dev/null\n"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:56
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:25
#, no-wrap
msgid "Ignition & Combustion files"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:57
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:26
msgid ""
"To automate the installation, we will leverage Butane, Ignition and "
"Combustion as explained before:"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:58
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:27
msgid "Create a temporary folder to store the assets"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:59
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:28
#, no-wrap
msgid "TMPDIR=$(mktemp -d)\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:60
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:29
msgid "Create the required folders for ignition and combustion"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:61
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:30
#, no-wrap
msgid "mkdir -p ${TMPDIR}/{combustion,ignition}\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:62
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:31
msgid ""
"Create a `config.fcc` butane config file as required. See the following "
"example to set a `root` password for the root user, and to configure the "
"hostname to be \"slemicro\"'"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:63
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:32
#, no-wrap
msgid ""
"cat << 'EOF' > ${TMPDIR}/config.fcc\n"
"variant: fcos\n"
"version: 1.4.0\n"
"storage:\n"
"  files:\n"
"    - path: /etc/hostname\n"
"      mode: 0644\n"
"      overwrite: true\n"
"      contents:\n"
"        inline: \"slemicro\"\n"
"passwd:\n"
"  users:\n"
"   - name: root\n"
"     password_hash: \"$y$j9T$/t4THH10B7esLiIVBROsE.$G1lyxfy/MoFVOrfXSnWAUq70Tf3mjfZBIe18koGOuXB\"\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:64
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:33
msgid ""
"Create a script combustion file as required. See the following example to "
"register the SLE Micro instance to SUSE's SCC (use your own email/regcode) "
"and to create a `/etc/issue.d/combustion` file"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:65
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:34
#, no-wrap
msgid ""
"cat << EOF > ${TMPDIR}/combustion/script\n"
"#!/bin/bash\n"
"# combustion: network\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:66
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:35
#, no-wrap
msgid ""
"# Redirect output to the console\n"
"exec > >(exec tee -a /dev/tty0) 2>&1\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:67
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:36
#, no-wrap
msgid ""
"# Set hostname at combustion phase for SUSEConnect\n"
"hostname slemicro\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:68
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:37
#, no-wrap
msgid ""
"# Registration\n"
"if ! which SUSEConnect > /dev/null 2>&1; then\n"
"    zypper --non-interactive install suseconnect-ng\n"
"fi\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:69
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:38
#, no-wrap
msgid "SUSEConnect --email foobar@suse.com --url https://scc.suse.com --regcode YOURCODE\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:70
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:39
#, no-wrap
msgid ""
"# Leave a marker\n"
"echo \"Configured with combustion\" > /etc/issue.d/combustion\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:71
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:40
msgid "Convert the butane config to ignition"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:72
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:41
#, no-wrap
msgid "butane -p -o ${TMPDIR}/ignition/config.ign ${TMPDIR}/config.fcc\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:73
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:42
msgid ""
"Create an ISO file. It is requried for both ignition and combustion to work "
"that the ISO is labeled as `ignition` (hence the -V parameter)"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:74
#, no-wrap
msgid ""
"mkisofs -full-iso9660-filenames -o ignition-and-combustion.iso \\\n"
" -V ignition ${TMPDIR}\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:75
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:44
msgid "*Optional:* Remove the temporary folder"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:76
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:45
#, no-wrap
msgid "rm -rf ${TMPDIR}\n"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:77
#, no-wrap
msgid "VM Creation"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:78
msgid "Now it is time to finally use UTM to boot the VM"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:80
msgid "Create a New Virtual Machine using Virtualization"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:82
msgid "Select \"Other\""
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:84
msgid ""
"Enable the \"Skip ISO boot\" option as we will use the raw disk directly"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:85
#, no-wrap
msgid "utm-other.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:86
msgid "Select the required CPU/RAM:"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:88
msgid "Accept the storage size as it is, it will be deleted before booting it"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:89
#, no-wrap
msgid "utm-storage.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:90
msgid "Skip the Shared Directory"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:91
#, no-wrap
msgid "utm-shared-directory.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:92
msgid ""
"Edit the VM name and enable the \"Open VM Settings\" toggle to customize it "
"further:"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:93
#, no-wrap
msgid "utm-summary.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:94
msgid "Delete the VirtIO Drive"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:95
#, no-wrap
msgid "utm-delete-virtio.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:96
msgid "Add a new Drive and select \"Import\""
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:97
#, no-wrap
msgid "utm-import-raw.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:98
msgid "Select the raw image file (~/VMs/slemicro.raw in this case)"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:99
#, no-wrap
msgid "utm-select-image.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:100
msgid "Repeat the last two steps to add the ignition-and-combustion.iso file"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:101
#, no-wrap
msgid "utm-select-iso.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:102
msgid "Configure the ISO as Read Only and \"CD/DVD (ISO) Image\""
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:103
#, no-wrap
msgid "utm-configure-iso.png"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:104
msgid "Finally, boot the VM."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:105
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:52
msgid ""
"After a couple of seconds, the VM will boot up and will configure itself "
"using the ignition and combustion scripts, including registering itself to "
"SCC"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:106
#, no-wrap
msgid "slemicro-firstboot.png"
msgstr ""

#. type: Target for macro image
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:107
#, no-wrap
msgid "scc-systems.png"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:108
msgid ""
"In case the VM doesn't get network connectivity, try https://github.com/"
"utmapp/UTM/discussions/3530#discussioncomment-5072113"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:109
msgid ""
"Once the VM is running, you can access via SSH via its IP as `ssh root@<ip>`"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:110
#, no-wrap
msgid "ISO Process (TBD)"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:111
msgid "Download the ISO file"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:112
msgid "Create a new VM on UTM using the ISO file"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:113
msgid "Create the autoyast answer file"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:114
msgid "Use the AutoYaST boot parameter to map to the answer file"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-utm-aarch64.adoc:115
msgid "Boot the VM"
msgstr ""

#. type: Title =
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:1
#, no-wrap
msgid "SLE Micro on X86_64 on libvirt (virt-install)"
msgstr ""

#. type: Title ==
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:2
#, no-wrap
msgid "Libvirt"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:3
#, no-wrap
msgid "libvirtd"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:4
msgid ""
"The libvirtd program is the server side daemon component of the libvirt "
"virtualization management system.  This daemon runs on host servers and "
"performs required management tasks for virtualized guests. This includes "
"activities such as starting, stopping and migrating guests between host "
"servers, configuring and manipulating networking, and managing storage for "
"use by guests.  The libvirt client libraries and utilities connect to this "
"daemon to issue tasks and collect information about the configuration and "
"resources of the host system and guests.  (see https://libvirt.org/manpages/"
"libvirtd.html)"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:5
#, no-wrap
msgid "virt-install"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:6
msgid ""
"`virt-install` is a command line tool for creating new KVM , Xen, or Linux "
"container guests using the \"libvirt\" hypervisor management library. See "
"the EXAMPLES section at the end of this document to quickly get started.  "
"`virt-install` tool supports both text based & graphical installations, "
"using VNC or SDL graphics, or a text serial console. The guest can be "
"configured to use one or more virtual disks, network interfaces, audio "
"devices, physical USB or PCI devices, among others.  The installation media "
"can be held locally or remotely on NFS , HTTP , FTP servers. In the latter "
"case `virt-install` will fetch the minimal files necessary to kick off the "
"installation process, allowing the guest to fetch the rest of the OS "
"distribution as needed. PXE booting, and importing an existing disk image "
"(thus skipping the install phase) are also supported."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:7
msgid ""
"To see more details about virt-install options, please visit https://linux."
"die.net/man/1/virt-install To see more details about virt-manager and the "
"graphical interface, please visit https://virt-manager.org/"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:9
msgid ""
"We have to create the image based and prepare the image with ignition and "
"combustion files.  Basically we will use the following documents as "
"reference to create the image changing the base SLEMicro image to be "
"downloaded (*in this case will be SLE Micro x86_64*):"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:11
msgid "Select AMD64/Intel 64 architecture"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:12
msgid ""
"Look for the raw file (I.e.- `SLE-Micro.x86_64-5.4.0-Default-GM.raw.xz`)"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:14
msgid ""
"If you are trying to download to a remote server, you can use scp to copy "
"that file to the server."
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:17
msgid "Butane, qemu-img and cdrtools installed (using zypper for example)"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:18
#, no-wrap
msgid "  sudo zypper install butane qemu-tools xz mkisofs\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:19
msgid "Unzip the file"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:20
#, no-wrap
msgid "  xz -d SLE-Micro.x86_64-5.4.0-Default-GM.raw.xz\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:22
#, no-wrap
msgid " qemu-img resize -f raw ~/PATH-TO-FILE/SLE-Micro.x86_64-5.4.0-Default-GM.raw 30G > /dev/null\n"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:23
#, no-wrap
msgid "Convert the raw image to qcow2"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:24
#, no-wrap
msgid "qemu-img convert -O qcow2 SLE-Micro.x86_64-5.4.0-Default-GM.raw slemicro\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:43
#, no-wrap
msgid "mkisofs -full-iso9660-filenames -o ignition-and-combustion.iso -V ignition ${TMPDIR}\n"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:46
#, no-wrap
msgid "Create the VM"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:47
#, no-wrap
msgid ""
"virt-install --name MyVM --memory 4096 --vcpus 4 --disk ./slemicro \\\n"
" --import --cdrom ./ignition-and-combustion.iso --network default \\\n"
" --osinfo detect=on,name=sle-unknown\n"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:48
msgid ""
"Pass the `--noautoconsole` flag in case your console hangs on the "
"installation, this will allow you to run other commands without CTRL-C "
"interrupt"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:49
msgid "Pass the `--debug` flag if you run into issues"
msgstr ""

#. type: delimited block =
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:50
msgid ""
"If you run into an issue and you need to restart, or if you get an error "
"saying that MyVM is already running, run this command:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:51
#, no-wrap
msgid " virsh destroy MyVM ; virsh undefine MyVM\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:53
#, no-wrap
msgid ""
"virsh list\n"
" Id   Nombre          State\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:54
#, no-wrap
msgid " 14   MyVM          running\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:55
#, no-wrap
msgid "====\n"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:56
#, no-wrap
msgid "Access to the vm"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:57
msgid "You can access to the VM using virsh console:"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:58
msgid "[,shell]"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:59
msgid "virsh console MyVM"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:60
msgid "Connected to domain MyVM"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:61
#, no-wrap
msgid "or using ssh directly and the user set in the ignition file (in this case root)\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:62
#, no-wrap
msgid "[,shell]\n"
msgstr ""

#. type: Plain text
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:63
#, no-wrap
msgid ""
"virsh domifaddr MyVM\n"
" Nombre     MAC address          Protocol     Address\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:64
#, no-wrap
msgid " vnet14     52:54:00:f0:be:e5    ipv4         192.168.122.221/24\n"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:65
#, no-wrap
msgid "ssh root@192.168.122.221\n"
msgstr ""

#. type: Title ===
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:66
#, no-wrap
msgid "Delete the VM"
msgstr ""

#. type: delimited block -
#: asciidoc/demo_setup/slemicro-virt-install-x86_64.adoc:67
#, no-wrap
msgid "virsh destroy MyVM ; virsh undefine MyVM\n"
msgstr ""
