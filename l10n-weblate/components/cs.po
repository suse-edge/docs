# Czech translations for PACKAGE package
# Copyright (C) 2024 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-07-23 11:17+0100\n"
"PO-Revision-Date: 2024-07-23 11:17+0100\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n"

#. type: Title =
#: asciidoc/components/akri.adoc:1
#, no-wrap
msgid "Akri"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:2
msgid ""
"Akri is a CNCF-Sandbox project that aims to discover leaf devices to present "
"those as Kubernetes native resource.  It also allows scheduling a pod or a "
"job for each discovered device.  Devices can be node-local or networked, and "
"can use a wide variety of protocols."
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:3
msgid "Akri's upstream documentation is available at: https://docs.akri.sh"
msgstr ""

#. type: Title ==
#: asciidoc/components/akri.adoc:4
#, no-wrap
msgid "How does SUSE Edge use Akri?"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:5
msgid "Akri is currently tech-preview in the SUSE Edge stack."
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:6
msgid ""
"Akri is available as part of the Edge Stack whenever there is a need to "
"discover and schedule workload against leaf devices."
msgstr ""

#. type: Title ===
#: asciidoc/components/akri.adoc:7
#, no-wrap
msgid "Installing Akri"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:8
msgid ""
"Akri is available as a Helm chart within the Edge Helm repository.  The "
"recommended way of configuring Akri is by using the given Helm chart to "
"deploy the different components (agent, controller, discovery-handlers), and "
"then use your preferred deployment mechanism to deploy Akri's Configuration "
"CRDs."
msgstr ""

#. type: Title ===
#: asciidoc/components/akri.adoc:9
#, no-wrap
msgid "Configuring Akri"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:10
msgid ""
"Akri is configured using a `akri.sh/Configuration` object, this object takes "
"in all information about how to discover the devices, as well as what to do "
"when a matching one is discovered."
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:11
msgid "Here is an example configuration breakdown with all fields explained:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/akri.adoc:12
#, no-wrap
msgid ""
"apiVersion: akri.sh/v0\n"
"kind: Configuration\n"
"metadata:\n"
"  name: sample-configuration\n"
"spec:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:13
msgid ""
"This part describes the configuration of the discovery handler, you have to "
"specify its name (the handlers available as part of Akri's chart are `udev`, "
"`opcua`, `onvif`).  The `discoveryDetails` is handler specific, refer to the "
"handler's documentation on how to configure it."
msgstr ""

#. type: delimited block -
#: asciidoc/components/akri.adoc:14
#, no-wrap
msgid ""
"  discoveryHandler:\n"
"    name: debugEcho\n"
"    discoveryDetails: |+\n"
"      descriptions:\n"
"        - \"foo\"\n"
"        - \"bar\"\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:15
msgid ""
"This section defines the workload to be deployed for every discovered "
"device.  The example shows a minimal version of a `Pod` configuration in "
"`brokerPodSpec`, all usual fields of a Pod's spec can be used here.  It also "
"shows the Akri specific syntax to request the device in the `resources` "
"section."
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:16
msgid ""
"You can alternatively use a Job instead of a Pod, using the `brokerJobSpec` "
"key instead, and providing the spec part of a Job to it."
msgstr ""

#. type: delimited block -
#: asciidoc/components/akri.adoc:17
#, no-wrap
msgid ""
"  brokerSpec:\n"
"    brokerPodSpec:\n"
"      containers:\n"
"      - name: broker-container\n"
"        image: rancher/hello-world\n"
"        resources:\n"
"          requests:\n"
"            \"{{PLACEHOLDER}}\" : \"1\"\n"
"          limits:\n"
"            \"{{PLACEHOLDER}}\" : \"1\"\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:18
msgid ""
"These two sections show how to configure Akri to deploy a service per broker "
"(`instanceService`), or pointing to all brokers (`configurationService`).  "
"These are containing all elements pertaining to a usual Service."
msgstr ""

#. type: delimited block -
#: asciidoc/components/akri.adoc:19
#, no-wrap
msgid ""
"  instanceServiceSpec:\n"
"    type: ClusterIp\n"
"    ports:\n"
"    - name: http\n"
"      port: 80\n"
"      protocol: tcp\n"
"      targetPort: 80\n"
"  configurationServiceSpec:\n"
"    type: ClusterIp\n"
"    ports:\n"
"    - name: https\n"
"      port: 443\n"
"      protocol: tcp\n"
"      targetPort: 443\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:20
msgid ""
"The `brokerProperties` field is a key/value store that will be exposed as "
"additional environment variables to any pod requesting a discovered device."
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:21
msgid ""
"The capacity is the allowed number of concurrent users of a discovered "
"device."
msgstr ""

#. type: delimited block -
#: asciidoc/components/akri.adoc:22
#, no-wrap
msgid ""
"  brokerProperties:\n"
"    key: value\n"
"  capacity: 1\n"
msgstr ""

#. type: Title ===
#: asciidoc/components/akri.adoc:23
#, no-wrap
msgid "Writing and deploying additional Discovery Handlers"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:24
msgid ""
"In case the protocol used by your device isn't covered by an existing "
"discovery handler, you can write your own using https://docs.akri.sh/"
"development/handler-development[this guide]"
msgstr ""

#. type: Title ===
#: asciidoc/components/akri.adoc:25
#, no-wrap
msgid "Akri Rancher Dashboard Extension"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:26
#: asciidoc/components/rancher-dashboard-extensions.adoc:29
msgid ""
"Akri Dashboard Extension allows you to use Rancher Dashboard user interface "
"to manage and monitor leaf devices and run workloads once these devices are "
"discovered."
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:27
msgid ""
"Once the extension is installed you can navigate to any Akri-enabled managed "
"cluster using cluster explorer. Under *Akri* navigation group you can see "
"Configurations and Instances sections."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/akri.adoc:28
#, no-wrap
msgid "akri-extension-configurations.png"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:29
msgid ""
"The configurations list provides information about Configuration Discovery "
"Handler and number of instances. Clicking the name opens a configuration "
"detail page."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/akri.adoc:30
#, no-wrap
msgid "akri-extension-configuration-detail.png"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:31
msgid ""
"You can also edit or create a new Configuration. Extension allows you to "
"select discovery handler, set up Broker Pod or Job, configure Configuration "
"and Instance services and set the Configuration capacity."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/akri.adoc:32
#, no-wrap
msgid "akri-extension-configuration-edit.png"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:33
msgid "Discovered devices are listed in the *Instances* list."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/akri.adoc:34
#, no-wrap
msgid "akri-extension-instances-list.png"
msgstr ""

#. type: Plain text
#: asciidoc/components/akri.adoc:35
msgid ""
"Clicking the Instance name opens a detail page allowing to view the "
"workloads and instance service."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/akri.adoc:36
#, no-wrap
msgid "akri-extension-instance-detail.png"
msgstr ""

#. type: Title =
#: asciidoc/components/edge-image-builder.adoc:1
#, no-wrap
msgid "Edge Image Builder"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:2
msgid ""
"See the https://github.com/suse-edge/edge-image-builder[Official Repository]."
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:3
msgid ""
"Edge Image Builder (EIB) is a tool that streamlines the generation of "
"customized, ready-to-boot (CRB) disk images for bootstrapping machines. "
"These images enable the end-to-end deployment of the entire SUSE software "
"stack with a single image."
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:4
msgid ""
"Whilst EIB can create CRB images for all provisioning scenarios, EIB "
"demonstrates a tremendous value in air-gapped deployments with limited or "
"completely isolated networks."
msgstr ""

#. type: Title ==
#: asciidoc/components/edge-image-builder.adoc:5
#, no-wrap
msgid "How does SUSE Edge use Edge Image Builder?"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:6
msgid ""
"SUSE Edge uses EIB for the simplified and quick configuration of customized "
"SLE Micro images for a variety of scenarios. These scenarios include the "
"bootstrapping of virtual and bare-metal machines with:"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:7
msgid ""
"Fully air-gapped deployments of K3s/RKE2 Kubernetes (single & multi-node)"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:8
msgid "Fully air-gapped Helm chart and Kubernetes manifest deployments"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:9
msgid "Registration to Rancher via Elemental API"
msgstr ""

#. type: Title =
#: asciidoc/components/edge-image-builder.adoc:10
#: asciidoc/components/metal3.adoc:1
#, no-wrap
msgid "Metal^3^"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:11
msgid ""
"Customized networking (for example, static IP, host name, VLAN's, bonding, "
"etc.)"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:12
msgid ""
"Customized operating system configurations (for example, users, groups, "
"passwords, SSH keys, proxies, NTP, custom SSL certificates, etc.)"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:13
msgid ""
"Air-gapped installation of host-level and side-loaded RPM packages "
"(including dependency resolution)"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:14
msgid "Registration to SUSE Manager for OS management"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:15
msgid "Embedded container images"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:16
msgid "Kernel command-line arguments"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:17
msgid "Systemd units to be enabled/disabled at boot time"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:18
msgid "Custom scripts and files for any manual tasks"
msgstr ""

#. type: Title ===
#: asciidoc/components/edge-image-builder.adoc:19
#: asciidoc/components/endpoint-copier-operator.adoc:6
#, no-wrap
msgid "Getting started"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:20
msgid ""
"Comprehensive documentation for the usage and testing of Edge Image Builder "
"can be found https://github.com/suse-edge/edge-image-builder/tree/"
"release-1.0/docs[here]."
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:21
msgid ""
"Additionally, here is a <<quickstart-eib,quick start guide>> for Edge Image "
"Builder covering a basic deployment scenario."
msgstr ""

#. type: Title ==
#: asciidoc/components/edge-image-builder.adoc:22
#: asciidoc/components/elemental.adoc:16
#: asciidoc/components/endpoint-copier-operator.adoc:9
#: asciidoc/components/metal3.adoc:8 asciidoc/components/metallb.adoc:15
#: asciidoc/components/sle-micro.adoc:13
#, no-wrap
msgid "Known issues"
msgstr ""

#. type: Plain text
#: asciidoc/components/edge-image-builder.adoc:23
msgid ""
"EIB air-gaps Helm charts through templating the Helm charts and parsing all "
"the images within the template. If a Helm chart does not keep all of its "
"images within the template and instead side-loads the images, EIB will not "
"be able to air-gap those images automatically. The solution to this is to "
"manually add any undetected images to the `embeddedArtifactRegistry` section "
"of the definition file."
msgstr ""

#. type: Title =
#: asciidoc/components/elemental.adoc:1
#, no-wrap
msgid "Elemental"
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:2
msgid ""
"Elemental is a software stack enabling centralized and full cloud-native OS "
"management with Kubernetes. The Elemental stack consists of a number of "
"components that either reside on Rancher itself, or on the edge nodes. The "
"core components are:"
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:3
msgid ""
"*elemental-operator* - The core operator that resides on Rancher and handles "
"registration requests from clients."
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:4
msgid ""
"*elemental-register* - The client that runs on the edge nodes allowing "
"registration via the `elemental-operator`."
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:5
msgid ""
"*elemental-system-agent* - An agent that resides on the edge nodes; its "
"configuration is fed from `elemental-register` and it receives a `plan` for "
"configuring the `rancher-system-agent`"
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:6
msgid ""
"*rancher-system-agent* - Once the edge node has fully registered, this takes "
"over from `elemental-system-agent` and waits for further `plans` from "
"Rancher Manager (e.g. for Kubernetes installation)."
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:7
msgid ""
"See https://elemental.docs.rancher.com/[Elemental upstream documentation] "
"for full information about Elemental and its relationship to Rancher."
msgstr ""

#. type: Title ==
#: asciidoc/components/elemental.adoc:8
#, no-wrap
msgid "How does SUSE Edge use Elemental?"
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:9
msgid ""
"We use portions of Elemental for managing remote devices where Metal^3^ is "
"not an option (for example, there is no BMC, or the device is behind a NAT "
"gateway). This tooling allows for an operator to bootstrap their devices in "
"a lab before knowing when or where they will be shipped to. Namely, we "
"leverage the `elemental-register` and `elemental-system-agent` components to "
"enable the onboarding of SLE Micro hosts to Rancher for \"phone home\" "
"network provisioning use-cases. When using Edge Image Builder (EIB) to "
"create deployment images, the automatic registration through Rancher via "
"Elemental can be achieved by specifying the registration configuration in "
"the configuration directory for EIB."
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:10
msgid ""
"In SUSE Edge 3.0 we do *not* leverage the operating system management "
"aspects of Elemental, and therefore it's not possible to manage your "
"operating system patching via Rancher. Instead of using the Elemental tools "
"to build deployment images, SUSE Edge uses the Edge Image Builder tooling, "
"which consumes the registration configuration."
msgstr ""

#. type: Title ==
#: asciidoc/components/elemental.adoc:11 asciidoc/components/k3s.adoc:7
#: asciidoc/components/metallb.adoc:12 asciidoc/components/rancher.adoc:20
#: asciidoc/components/rke2.adoc:16 asciidoc/components/sle-micro.adoc:7
#, no-wrap
msgid "Best practices"
msgstr ""

#. type: Title ===
#: asciidoc/components/elemental.adoc:12 asciidoc/components/sle-micro.adoc:8
#, no-wrap
msgid "Installation media"
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:13
msgid ""
"The SUSE Edge recommended way of building deployments image that can "
"leverage Elemental for registration to Rancher in the \"phone home network "
"provisioning\" deployment footprint is to follow the instructions detailed "
"in the <<quickstart-elemental,remote host onboarding with Elemental>> "
"quickstart."
msgstr ""

#. type: Title ===
#: asciidoc/components/elemental.adoc:14
#, no-wrap
msgid "Labels"
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:15
msgid ""
"Elemental tracks its inventory with the `MachineInventory` CRD and provides "
"a way to select inventory, e.g. for selecting machines to deploy Kubernetes "
"clusters to, based on labels. This provides a way for users to predefine "
"most (if not all) of their infrastructure needs prior to hardware even being "
"purchased. Also, since nodes can add/remove labels on their respective "
"inventory object (by re-running `elemental-register` with the additional "
"flag `--label \"FOO=BAR\"`), we can write scripts that will discover and let "
"Rancher know where a node is booted."
msgstr ""

#. type: Plain text
#: asciidoc/components/elemental.adoc:17
msgid ""
"The Elemental UI does not currently know how to build installation media or "
"update non-\"Elemental Teal\" operating systems. This should be addressed in "
"future releases."
msgstr ""

#. type: Title =
#: asciidoc/components/endpoint-copier-operator.adoc:1
#, no-wrap
msgid "Endpoint Copier Operator"
msgstr ""

#. type: Plain text
#: asciidoc/components/endpoint-copier-operator.adoc:2
msgid ""
"https://github.com/suse-edge/endpoint-copier-operator[Endpoint Copier "
"Operator] is a Kubernetes operator whose purpose is to create a copy of a "
"Kubernetes Service and Endpoint and to keep them synced."
msgstr ""

#. type: Title ==
#: asciidoc/components/endpoint-copier-operator.adoc:3
#, no-wrap
msgid "How does SUSE Edge use Endpoint Copier Operator?"
msgstr ""

#. type: Plain text
#: asciidoc/components/endpoint-copier-operator.adoc:4
msgid ""
"At SUSE Edge, the Endpoint Copier Operator plays a crucial role in achieving "
"High Availability (HA) setup for K3s/RKE2 clusters. This is accomplished by "
"creating a `kubernetes-vip` service of type `LoadBalancer`, ensuring its "
"Endpoint remains in constant synchronization with the kubernetes Endpoint. "
"<<components-metallb,MetalLB>> is leveraged to manage the `kubernetes-vip` "
"service, as the exposed IP address is used from other nodes to join the "
"cluster."
msgstr ""

#. type: Title ==
#: asciidoc/components/endpoint-copier-operator.adoc:5
#, no-wrap
msgid "Best Practices"
msgstr ""

#. type: Plain text
#: asciidoc/components/endpoint-copier-operator.adoc:7
msgid ""
"Comprehensive documentation for using the Endpoint Copier Operator can be "
"found https://github.com/suse-edge/endpoint-copier-operator/blob/main/README."
"md[here]."
msgstr ""

#. type: Plain text
#: asciidoc/components/endpoint-copier-operator.adoc:8
msgid ""
"Additionally, refer to <<guides-metallb-k3s,our guide>> on achieving a K3s/"
"RKE2 HA setup using the Endpoint Copier Operator and MetalLB."
msgstr ""

#. type: Plain text
#: asciidoc/components/endpoint-copier-operator.adoc:10
msgid ""
"Presently, the Endpoint Copier Operator is limited to working with only one "
"Service/Endpoint. Enhancements to support multiple Services/Endpoints are "
"planned for the future."
msgstr ""

#. type: Title =
#: asciidoc/components/fleet.adoc:1
#, no-wrap
msgid "Fleet"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:2
msgid ""
"https://fleet.rancher.io[Fleet] is a container management and deployment "
"engine designed to offer users more control on the local cluster and "
"constant monitoring through GitOps. Fleet focuses not only on the ability to "
"scale, but it also gives users a high degree of control and visibility to "
"monitor exactly what is installed on the cluster."
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:3
msgid ""
"Fleet can manage deployments from Git of raw Kubernetes YAML, Helm charts, "
"Kustomize, or any combination of the three. Regardless of the source, all "
"resources are dynamically turned into Helm charts, and Helm is used as the "
"engine to deploy all resources in the cluster. As a result, users can enjoy "
"a high degree of control, consistency and auditability of their clusters."
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:4
msgid ""
"For information about how Fleet works, see https://ranchermanager.docs."
"rancher.com/integrations-in-rancher/fleet/architecture[this page]."
msgstr ""

#. type: Title ==
#: asciidoc/components/fleet.adoc:5
#, no-wrap
msgid "Installing Fleet with Helm"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:6
msgid ""
"Fleet comes built-in to Rancher, but it can be also https://fleet.rancher.io/"
"installation[installed] as a standalone application on any Kubernetes "
"cluster using Helm."
msgstr ""

#. type: Title ==
#: asciidoc/components/fleet.adoc:7
#, no-wrap
msgid "Using Fleet with Rancher"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:8
msgid ""
"Rancher uses Fleet to deploy applications across managed clusters. "
"Continuous delivery with Fleet introduces GitOps at scale, designed to "
"manage applications running on large numbers of clusters."
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:9
msgid ""
"Fleet shines as an integrated part of Rancher. Clusters managed with Rancher "
"automatically get the Fleet agent deployed as part of the installation/"
"import process and the cluster is immediately available to be managed by "
"Fleet."
msgstr ""

#. type: Title ==
#: asciidoc/components/fleet.adoc:10
#, no-wrap
msgid "Accessing Fleet in the Rancher UI"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:11
msgid ""
"Fleet comes preinstalled in Rancher and is managed by the *Continuous "
"Delivery* option in the Rancher UI. For additional information on Continuous "
"Delivery and other Fleet troubleshooting tips, refer https://fleet.rancher."
"io/troubleshooting[here]."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/fleet.adoc:12
#, no-wrap
msgid "fleet-dashboard.png"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:13
msgid "Continuous Delivery section consists of following items:"
msgstr ""

#. type: Title ===
#: asciidoc/components/fleet.adoc:14
#, no-wrap
msgid "Dashboard"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:15
msgid ""
"An overview page of all GitOps repositories across all workspaces. Only the "
"workspaces with repositories are displayed."
msgstr ""

#. type: Title ===
#: asciidoc/components/fleet.adoc:16
#, no-wrap
msgid "Git repos"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:17
msgid ""
"A list of GitOps repositories in the selected workspace. Select the active "
"workspace using the drop-down list at the top of the page."
msgstr ""

#. type: Title ===
#: asciidoc/components/fleet.adoc:18
#, no-wrap
msgid "Clusters"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:19
msgid ""
"A list of managed clusters. By default, all Rancher-managed clusters are "
"added to the `fleet-default` workspace. `fleet-local` workspace includes the "
"local (management) cluster. From here, it is possible to `Pause` or `Force "
"update` the clusters or move the cluster into another workspace. Editing the "
"cluster allows to update labels and annotations used for grouping the "
"clusters."
msgstr ""

#. type: Title ===
#: asciidoc/components/fleet.adoc:20
#, no-wrap
msgid "Cluster groups"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:21
msgid ""
"This section allows custom grouping of the clusters within the workspace "
"using selectors."
msgstr ""

#. type: Title ===
#: asciidoc/components/fleet.adoc:22
#, no-wrap
msgid "Advanced"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:23
msgid ""
"The \"Advanced\" section allows to manage workspaces and other related Fleet "
"resources."
msgstr ""

#. type: Title ==
#: asciidoc/components/fleet.adoc:24
#, no-wrap
msgid "Example of installing KubeVirt with Rancher and Fleet using Rancher dashboard"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:25
msgid "Create a Git repository containing the `fleet.yaml` file:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/fleet.adoc:26
#, no-wrap
msgid ""
"defaultNamespace: kubevirt\n"
"helm:\n"
"  chart: \"oci://registry.suse.com/edge/kubevirt-chart\"\n"
"  version: \"0.2.4\"\n"
"  # kubevirt namespace is created by kubevirt as well, we need to take ownership of it\n"
"  takeOwnership: true\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:27
msgid ""
"In the Rancher dashboard, navigate to *☰ > Continuous Delivery > Git Repos* "
"and click `Add Repository`."
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:28
msgid ""
"The Repository creation wizard guides through creation of the Git repo. "
"Provide *Name*, *Repository URL* (referencing the Git repository created in "
"the previous step) and select the appropriate branch or revision. In the "
"case of a more complex repository, specify *Paths* to use multiple "
"directories in a single repository."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/fleet.adoc:29
#, no-wrap
msgid "fleet-create-repo1.png"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:30
msgid "Click `Next`."
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:31
msgid ""
"In the next step, you can define where the workloads will get deployed. "
"Cluster selection offers several basic options: you can select no clusters, "
"all clusters, or directly choose a specific managed cluster or cluster group "
"(if defined). The \"Advanced\" option allows to directly edit the selectors "
"via YAML."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/fleet.adoc:32
#, no-wrap
msgid "fleet-create-repo2.png"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:33
msgid ""
"Click `Create`. The repository gets created. From now on, the workloads are "
"installed and kept in sync on the clusters matching the repository "
"definition."
msgstr ""

#. type: Title ==
#: asciidoc/components/fleet.adoc:34
#, no-wrap
msgid "Debugging and troubleshooting"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:35
msgid ""
"The \"Advanced\" navigation section provides overviews of lower-level Fleet "
"resources. https://fleet.rancher.io/ref-bundle-stages[A bundle] is an "
"internal resource used for the orchestration of resources from Git. When a "
"Git repo is scanned, it produces one or more bundles."
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:36
msgid ""
"To find bundles relevant to a specific repository, go to the Git repo detail "
"page and click the `Bundles` tab."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/fleet.adoc:37
#, no-wrap
msgid "fleet-repo-bundles.png"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:38
msgid ""
"For each cluster, the bundle is applied to a BundleDeployment resource that "
"is created. To view BundleDeployment details, click the `Graph` button in "
"the upper right of the Git repo detail page.  A graph of *Repo > Bundles > "
"BundleDeployments* is loaded. Click the BundleDeployment in the graph to see "
"its details and click the `Id` to view the BundleDeployment YAML."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/fleet.adoc:39
#, no-wrap
msgid "fleet-repo-graph.png"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:40
msgid ""
"For additional information on Fleet troubleshooting tips, refer https://"
"fleet.rancher.io/troubleshooting[here]."
msgstr ""

#. type: Title ==
#: asciidoc/components/fleet.adoc:41
#, no-wrap
msgid "Fleet examples"
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:42
msgid ""
"The Edge team maintains a https://github.com/suse-edge/fleet-"
"examples[repository] with examples of installing Edge projects with Fleet."
msgstr ""

#. type: Plain text
#: asciidoc/components/fleet.adoc:43
msgid ""
"The Fleet project includes a https://github.com/rancher/fleet-examples[fleet-"
"examples] repository that covers all use cases for https://fleet.rancher.io/"
"gitrepo-content[Git repository structure]."
msgstr ""

#. type: Title =
#: asciidoc/components/k3s.adoc:1
#, no-wrap
msgid "K3s"
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:2
msgid ""
"https://k3s.io/[K3s] is a highly available, certified Kubernetes "
"distribution designed for production workloads in unattended, resource-"
"constrained, remote locations or inside IoT appliances."
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:3
msgid ""
"It is packaged as a single and small binary, so installations and updates "
"are fast and easy."
msgstr ""

#. type: Title ==
#: asciidoc/components/k3s.adoc:4
#, no-wrap
msgid "How does SUSE Edge use K3s"
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:5
msgid ""
"K3s can be used as the Kubernetes distribution backing the SUSE Edge stack.  "
"It is meant to be installed on a SLE Micro operating system."
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:6
msgid ""
"Using K3s as the SUSE Edge stack Kubernetes distribution is only recommended "
"when etcd as a backend does not fit your constraints. If etcd as a backend "
"is possible, it is better to use <<components-rke2,RKE2>>."
msgstr ""

#. type: Title ===
#: asciidoc/components/k3s.adoc:8
#: asciidoc/components/rancher-dashboard-extensions.adoc:9
#: asciidoc/components/rke2.adoc:17 asciidoc/components/virtualization.adoc:149
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:9
msgid ""
"The recommended way of installing K3s as part of the SUSE Edge stack is by "
"using Edge Image Builder (EIB). See <<components-eib,its documentation>> for "
"more details on how to configure it to deploy K3s."
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:10
msgid "It automatically supports HA setup, as well as Elemental setup."
msgstr ""

#. type: Title ===
#: asciidoc/components/k3s.adoc:11
#, no-wrap
msgid "Fleet for GitOps workflow"
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:12
msgid ""
"The SUSE Edge stack uses Fleet as its preferred GitOps tool.  For more "
"information around its installation and use, refer to <<components-fleet,the "
"Fleet section>> in this documentation."
msgstr ""

#. type: Title ===
#: asciidoc/components/k3s.adoc:13
#, no-wrap
msgid "Storage management"
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:14
msgid ""
"K3s comes with local-path storage preconfigured, which is suitable for "
"single-node clusters.  For clusters spanning over multiple nodes, we "
"recommend using <<components-longhorn,Longhorn>>."
msgstr ""

#. type: Title ===
#: asciidoc/components/k3s.adoc:15
#, no-wrap
msgid "Load balancing and HA"
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:16
msgid ""
"If you installed K3s using EIB, this part is already covered by the EIB "
"documentation in the HA section."
msgstr ""

#. type: Plain text
#: asciidoc/components/k3s.adoc:17
msgid ""
"Otherwise, you need to install and configure MetalLB as per our <<guides-"
"metallb-k3s,MetalLB documentation>>."
msgstr ""

#. type: Title =
#: asciidoc/components/longhorn.adoc:1
#, no-wrap
msgid "Longhorn"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:2
msgid ""
"Longhorn is a lightweight, reliable and user-friendly distributed block "
"storage system designed for Kubernetes.  As an open source project, Longhorn "
"was initially developed by Rancher Labs and is currently incubated under the "
"CNCF."
msgstr ""

#. type: Title ==
#: asciidoc/components/longhorn.adoc:3 asciidoc/components/networking.adoc:19
#: asciidoc/components/rancher-dashboard-extensions.adoc:4
#: asciidoc/components/virtualization.adoc:11
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:4
msgid ""
"If you are following this guide, it assumes that you have the following "
"already available:"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:5
msgid ""
"At least one host with SLE Micro 5.5 installed; this can be physical or "
"virtual"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:6
msgid "A Kubernetes cluster installed; either K3s or RKE2"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:7
msgid "Helm"
msgstr ""

#. type: Title ==
#: asciidoc/components/longhorn.adoc:8
#, no-wrap
msgid "Manual installation of Longhorn"
msgstr ""

#. type: Title ===
#: asciidoc/components/longhorn.adoc:9
#, no-wrap
msgid "Installing Open-iSCSI"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:10
msgid ""
"A core requirement of deploying and using Longhorn is the installation of "
"the `open-iscsi` package and the `iscsid` daemon running on all Kubernetes "
"nodes.  This is necessary, since Longhorn relies on `iscsiadm` on the host "
"to provide persistent volumes to Kubernetes."
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:11
msgid "Let's install it:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:12
#, no-wrap
msgid "transactional-update pkg install open-iscsi\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:13
msgid ""
"It is important to note that once the operation is completed, the package is "
"only installed into a new snapshot as SLE Micro is an immutable operating "
"system.  In order to load it and for the `iscsid` daemon to start running, "
"we must reboot into that new snapshot that we just created.  Issue the "
"reboot command when you are ready:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:14
#, no-wrap
msgid "reboot\n"
msgstr ""

#. type: delimited block =
#: asciidoc/components/longhorn.adoc:15
msgid ""
"For additional help installing open-iscsi, refer to the https://longhorn.io/"
"docs/1.6.1/deploy/install/#installing-open-iscsi[official Longhorn "
"documentation]."
msgstr ""

#. type: Title ===
#: asciidoc/components/longhorn.adoc:16
#, no-wrap
msgid "Installing Longhorn"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:17
msgid ""
"There are several ways to install Longhorn on your Kubernetes clusters.  "
"This guide will follow through the Helm installation, however feel free to "
"follow the https://longhorn.io/docs/1.6.1/deploy/install/[official "
"documentation] if another approach is desired."
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:18
msgid "Add the Longhorn Helm repository:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:19
#, no-wrap
msgid "helm repo add longhorn https://charts.longhorn.io\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:20
msgid "Fetch the latest charts from the repository:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:21
#, no-wrap
msgid "helm repo update\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:22
msgid "Install Longhorn in the longhorn-system namespace:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:23
#, no-wrap
msgid "helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version 1.6.1\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:24
msgid "Confirm that the deployment succeeded:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:25
#, no-wrap
msgid "kubectl -n longhorn-system get pods\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:26
#, no-wrap
msgid ""
"localhost:~ # kubectl -n longhorn-system get pod\n"
"NAMESPACE         NAME                                                READY   STATUS      RESTARTS        AGE\n"
"longhorn-system   longhorn-ui-5fc9fb76db-z5dc9                        1/1     Running     0               90s\n"
"longhorn-system   longhorn-ui-5fc9fb76db-dcb65                        1/1     Running     0               90s\n"
"longhorn-system   longhorn-manager-wts2v                              1/1     Running     1 (77s ago)     90s\n"
"longhorn-system   longhorn-driver-deployer-5d4f79ddd-fxgcs            1/1     Running     0               90s\n"
"longhorn-system   instance-manager-a9bf65a7808a1acd6616bcd4c03d925b   1/1     Running     0               70s\n"
"longhorn-system   engine-image-ei-acb7590c-htqmp                      1/1     Running     0               70s\n"
"longhorn-system   csi-attacher-5c4bfdcf59-j8xww                       1/1     Running     0               50s\n"
"longhorn-system   csi-provisioner-667796df57-l69vh                    1/1     Running     0               50s\n"
"longhorn-system   csi-attacher-5c4bfdcf59-xgd5z                       1/1     Running     0               50s\n"
"longhorn-system   csi-provisioner-667796df57-dqkfr                    1/1     Running     0               50s\n"
"longhorn-system   csi-attacher-5c4bfdcf59-wckt8                       1/1     Running     0               50s\n"
"longhorn-system   csi-resizer-694f8f5f64-7n2kq                        1/1     Running     0               50s\n"
"longhorn-system   csi-snapshotter-959b69d4b-rp4gk                     1/1     Running     0               50s\n"
"longhorn-system   csi-resizer-694f8f5f64-r6ljc                        1/1     Running     0               50s\n"
"longhorn-system   csi-resizer-694f8f5f64-k7429                        1/1     Running     0               50s\n"
"longhorn-system   csi-snapshotter-959b69d4b-5k8pg                     1/1     Running     0               50s\n"
"longhorn-system   csi-provisioner-667796df57-n5w9s                    1/1     Running     0               50s\n"
"longhorn-system   csi-snapshotter-959b69d4b-x7b7t                     1/1     Running     0               50s\n"
"longhorn-system   longhorn-csi-plugin-bsc8c                           3/3     Running     0               50s\n"
msgstr ""

#. type: Title ==
#: asciidoc/components/longhorn.adoc:27
#, no-wrap
msgid "Creating Longhorn volumes"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:28
msgid ""
"Longhorn utilizes Kubernetes resources called `StorageClass` in order to "
"automatically provision `PersistentVolume` objects for pods.  Think of "
"`StorageClass` as a way for administrators to describe the _classes_ or "
"_profiles_ of storage they offer."
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:29
msgid "Let's create a `StorageClass` with some default options:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:30
#, no-wrap
msgid ""
"kubectl apply -f - <<EOF\n"
"kind: StorageClass\n"
"apiVersion: storage.k8s.io/v1\n"
"metadata:\n"
"  name: longhorn-example\n"
"provisioner: driver.longhorn.io\n"
"allowVolumeExpansion: true\n"
"parameters:\n"
"  numberOfReplicas: \"3\"\n"
"  staleReplicaTimeout: \"2880\" # 48 hours in minutes\n"
"  fromBackup: \"\"\n"
"  fsType: \"ext4\"\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:31
msgid ""
"Now that we have our `StorageClass` in place, we need a "
"`PersistentVolumeClaim` referencing it.  A `PersistentVolumeClaim` (PVC) is "
"a request for storage by a user. PVCs consume `PersistentVolume` resources.  "
"Claims can request specific sizes and access modes (e.g., they can be "
"mounted once read/write or many times read-only)."
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:32
msgid "Let's create a `PersistentVolumeClaim`:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:33
#, no-wrap
msgid ""
"kubectl apply -f - <<EOF\n"
"apiVersion: v1\n"
"kind: PersistentVolumeClaim\n"
"metadata:\n"
"  name: longhorn-volv-pvc\n"
"  namespace: longhorn-system\n"
"spec:\n"
"  accessModes:\n"
"    - ReadWriteOnce\n"
"  storageClassName: longhorn-example\n"
"  resources:\n"
"    requests:\n"
"      storage: 2Gi\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:34
msgid ""
"That's it! Once we have the `PersistentVolumeClaim` created, we can proceed "
"with attaching it to a `Pod`.  When the `Pod` is deployed, Kubernetes "
"creates the Longhorn volume and binds it to the `Pod` if storage is "
"available."
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:35
#, no-wrap
msgid ""
"kubectl apply -f - <<EOF\n"
"apiVersion: v1\n"
"kind: Pod\n"
"metadata:\n"
"  name: volume-test\n"
"  namespace: longhorn-system\n"
"spec:\n"
"  containers:\n"
"  - name: volume-test\n"
"    image: nginx:stable-alpine\n"
"    imagePullPolicy: IfNotPresent\n"
"    volumeMounts:\n"
"    - name: volv\n"
"      mountPath: /data\n"
"    ports:\n"
"    - containerPort: 80\n"
"  volumes:\n"
"  - name: volv\n"
"    persistentVolumeClaim:\n"
"      claimName: longhorn-volv-pvc\n"
"EOF\n"
msgstr ""

#. type: delimited block =
#: asciidoc/components/longhorn.adoc:36
msgid ""
"The concept of storage in Kubernetes is a complex, but important topic. We "
"briefly mentioned some of the most common Kubernetes resources, however, we "
"suggest to familiarize yourself with the https://longhorn.io/docs/1.6.1/"
"terminology/[terminology documentation] that Longhorn offers."
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:37
msgid "In this example, the result should look something like this:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:38
#, no-wrap
msgid ""
"localhost:~ # kubectl get storageclass\n"
"NAME                 PROVISIONER          RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\n"
"longhorn (default)   driver.longhorn.io   Delete          Immediate           true                   12m\n"
"longhorn-example     driver.longhorn.io   Delete          Immediate           true                   24s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:39
#, no-wrap
msgid ""
"localhost:~ # kubectl get pvc -n longhorn-system\n"
"NAME                STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE\n"
"longhorn-volv-pvc   Bound    pvc-f663a92e-ac32-49ae-b8e5-8a6cc29a7d1e   2Gi        RWO            longhorn-example   54s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:40
#, no-wrap
msgid ""
"localhost:~ # kubectl get pods -n longhorn-system\n"
"NAME                                                READY   STATUS    RESTARTS      AGE\n"
"csi-attacher-5c4bfdcf59-qmjtz                       1/1     Running   0             14m\n"
"csi-attacher-5c4bfdcf59-s7n65                       1/1     Running   0             14m\n"
"csi-attacher-5c4bfdcf59-w9xgs                       1/1     Running   0             14m\n"
"csi-provisioner-667796df57-fmz2d                    1/1     Running   0             14m\n"
"csi-provisioner-667796df57-p7rjr                    1/1     Running   0             14m\n"
"csi-provisioner-667796df57-w9fdq                    1/1     Running   0             14m\n"
"csi-resizer-694f8f5f64-2rb8v                        1/1     Running   0             14m\n"
"csi-resizer-694f8f5f64-z9v9x                        1/1     Running   0             14m\n"
"csi-resizer-694f8f5f64-zlncz                        1/1     Running   0             14m\n"
"csi-snapshotter-959b69d4b-5dpvj                     1/1     Running   0             14m\n"
"csi-snapshotter-959b69d4b-lwwkv                     1/1     Running   0             14m\n"
"csi-snapshotter-959b69d4b-tzhwc                     1/1     Running   0             14m\n"
"engine-image-ei-5cefaf2b-hvdv5                      1/1     Running   0             14m\n"
"instance-manager-0ee452a2e9583753e35ad00602250c5b   1/1     Running   0             14m\n"
"longhorn-csi-plugin-gd2jx                           3/3     Running   0             14m\n"
"longhorn-driver-deployer-9f4fc86-j6h2b              1/1     Running   0             15m\n"
"longhorn-manager-z4lnl                              1/1     Running   0             15m\n"
"longhorn-ui-5f4b7bbf69-bln7h                        1/1     Running   3 (14m ago)   15m\n"
"longhorn-ui-5f4b7bbf69-lh97n                        1/1     Running   3 (14m ago)   15m\n"
"volume-test                                         1/1     Running   0             26s\n"
msgstr ""

#. type: Title ==
#: asciidoc/components/longhorn.adoc:41
#, no-wrap
msgid "Accessing the UI"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:42
msgid ""
"If you installed Longhorn with kubectl or Helm, you need to set up an "
"Ingress controller to allow external traffic into the cluster. "
"Authentication is not enabled by default. If the Rancher catalog app was "
"used, Rancher automatically created an Ingress controller with access "
"control (the rancher-proxy)."
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:43
msgid "Get the Longhorn’s external service IP address:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:44
#, no-wrap
msgid "kubectl -n longhorn-system get svc\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:45
msgid ""
"Once you have retrieved the `longhorn-frontend` IP address, you can start "
"using the UI by navigating to it in your browser."
msgstr ""

#. type: Title ==
#: asciidoc/components/longhorn.adoc:46 asciidoc/components/neuvector.adoc:16
#: asciidoc/components/rancher.adoc:25
#: asciidoc/components/virtualization.adoc:166
#, no-wrap
msgid "Installing with Edge Image Builder"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:47
msgid ""
"SUSE Edge is using <<components-eib>> in order to customize base SLE Micro "
"OS images.  We are going to demonstrate how to do so for provisioning an "
"RKE2 cluster with Longhorn on top of it."
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:48
msgid "Let's create the definition file:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:49
#, no-wrap
msgid ""
"export CONFIG_DIR=$HOME/eib\n"
"mkdir -p $CONFIG_DIR\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:50
#, no-wrap
msgid ""
"cat << EOF > $CONFIG_DIR/iso-definition.yaml\n"
"apiVersion: 1.0\n"
"image:\n"
"  imageType: iso\n"
"  baseImage: SLE-Micro.x86_64-5.5.0-Default-SelfInstall-GM2.install.iso\n"
"  arch: x86_64\n"
"  outputImageName: eib-image.iso\n"
"kubernetes:\n"
"  version: v1.28.9+rke2r1\n"
"  helm:\n"
"    charts:\n"
"      - name: longhorn\n"
"        version: 1.6.1\n"
"        repositoryName: longhorn\n"
"        targetNamespace: longhorn-system\n"
"        createNamespace: true\n"
"        installationNamespace: kube-system\n"
"    repositories:\n"
"      - name: longhorn\n"
"        url: https://charts.longhorn.io\n"
"operatingSystem:\n"
"  packages:\n"
"    sccRegistrationCode: <reg-code>\n"
"    packageList:\n"
"      - open-iscsi\n"
"  users:\n"
"  - username: root\n"
"    encryptedPassword: \\$6\\$jHugJNNd3HElGsUZ\\$eodjVe4te5ps44SVcWshdfWizrP.xAyd71CVEXazBJ/.v799/WRCBXxfYmunlBO2yp1hm/zb4r8EmnrrNCF.P/\n"
"EOF\n"
msgstr ""

#. type: delimited block =
#: asciidoc/components/longhorn.adoc:51
msgid ""
"Customizing any of the Helm chart values is possible via a separate file "
"provided under `helm.charts[].valuesFile`.  Refer to the https://github.com/"
"suse-edge/edge-image-builder/blob/release-1.0/docs/building-images."
"md#kubernetes[upstream documentation] for details."
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:52 asciidoc/components/networking.adoc:139
#: asciidoc/components/networking.adoc:177
msgid "Let's build the image:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:53
#, no-wrap
msgid "podman run --rm --privileged -it -v $CONFIG_DIR:/eib registry.suse.com/edge/edge-image-builder:1.0.2 build --definition-file $CONFIG_DIR/iso-definition.yaml\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:54
msgid ""
"After the image is built, you can use it to install your OS on a physical or "
"virtual host.  Once the provisioning is complete, you are able to log in to "
"the system using the `root:eib` credentials pair."
msgstr ""

#. type: Plain text
#: asciidoc/components/longhorn.adoc:55
msgid "Ensure that Longhorn has been successfully deployed:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/longhorn.adoc:56
#, no-wrap
msgid ""
"localhost:~ # /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml -n longhorn-system get pods\n"
"NAME                                                READY   STATUS    RESTARTS        AGE\n"
"csi-attacher-5c4bfdcf59-qmjtz                       1/1     Running   0               103s\n"
"csi-attacher-5c4bfdcf59-s7n65                       1/1     Running   0               103s\n"
"csi-attacher-5c4bfdcf59-w9xgs                       1/1     Running   0               103s\n"
"csi-provisioner-667796df57-fmz2d                    1/1     Running   0               103s\n"
"csi-provisioner-667796df57-p7rjr                    1/1     Running   0               103s\n"
"csi-provisioner-667796df57-w9fdq                    1/1     Running   0               103s\n"
"csi-resizer-694f8f5f64-2rb8v                        1/1     Running   0               103s\n"
"csi-resizer-694f8f5f64-z9v9x                        1/1     Running   0               103s\n"
"csi-resizer-694f8f5f64-zlncz                        1/1     Running   0               103s\n"
"csi-snapshotter-959b69d4b-5dpvj                     1/1     Running   0               103s\n"
"csi-snapshotter-959b69d4b-lwwkv                     1/1     Running   0               103s\n"
"csi-snapshotter-959b69d4b-tzhwc                     1/1     Running   0               103s\n"
"engine-image-ei-5cefaf2b-hvdv5                      1/1     Running   0               109s\n"
"instance-manager-0ee452a2e9583753e35ad00602250c5b   1/1     Running   0               109s\n"
"longhorn-csi-plugin-gd2jx                           3/3     Running   0               103s\n"
"longhorn-driver-deployer-9f4fc86-j6h2b              1/1     Running   0               2m28s\n"
"longhorn-manager-z4lnl                              1/1     Running   0               2m28s\n"
"longhorn-ui-5f4b7bbf69-bln7h                        1/1     Running   3 (2m7s ago)    2m28s\n"
"longhorn-ui-5f4b7bbf69-lh97n                        1/1     Running   3 (2m10s ago)   2m28s\n"
msgstr ""

#. type: delimited block =
#: asciidoc/components/longhorn.adoc:57
msgid ""
"This installation will not work for completely air-gapped environments.  In "
"those cases, please refer to <<longhorn-install>>."
msgstr ""

#. type: Plain text
#: asciidoc/components/metal3.adoc:2
msgid ""
"https://metal3.io/[Metal^3^] is a CNCF project which provides bare-metal "
"infrastructure management capabilities for Kubernetes."
msgstr ""

#. type: Plain text
#: asciidoc/components/metal3.adoc:3
msgid ""
"Metal^3^ provides Kubernetes-native resources to manage the lifecycle of "
"bare-metal servers which support management via out-of-band protocols such "
"as https://www.dmtf.org/standards/redfish[Redfish]."
msgstr ""

#. type: Plain text
#: asciidoc/components/metal3.adoc:4
msgid ""
"It also has mature support for https://cluster-api.sigs.k8s.io/[Cluster API "
"(CAPI)] which enables management of infrastructure resources across multiple "
"infrastructure providers via broadly adopted vendor-neutral APIs."
msgstr ""

#. type: Title ==
#: asciidoc/components/metal3.adoc:5
#, no-wrap
msgid "How does SUSE Edge use Metal3?"
msgstr ""

#. type: Plain text
#: asciidoc/components/metal3.adoc:6
msgid ""
"This method is useful for scenarios where the target hardware supports out-"
"of-band management, and a fully automated infrastructure management flow is "
"desired."
msgstr ""

#. type: Plain text
#: asciidoc/components/metal3.adoc:7
msgid ""
"This method provides declarative APIs that enable inventory and state "
"management of bare-metal servers, including automated inspection, cleaning "
"and provisioning/deprovisioning."
msgstr ""

#. type: Plain text
#: asciidoc/components/metal3.adoc:9
msgid ""
"The upstream https://github.com/metal3-io/ip-address-manager[IP Address "
"Management controller] is currently not supported, because it is not yet "
"compatible with our choice of network configuration tooling."
msgstr ""

#. type: Plain text
#: asciidoc/components/metal3.adoc:10
msgid ""
"Relatedly, the IPAM resources and Metal3DataTemplate networkData fields are "
"not supported."
msgstr ""

#. type: Plain text
#: asciidoc/components/metal3.adoc:11
msgid "Only deployment via redfish-virtualmedia is currently supported."
msgstr ""

#. type: Title =
#: asciidoc/components/metallb.adoc:1
#, no-wrap
msgid "MetalLB"
msgstr ""

#. type: Plain text
#: asciidoc/components/metallb.adoc:2
msgid "See https://metallb.universe.tf/[MetalLB official documentation]."
msgstr ""

#. type: delimited block _
#: asciidoc/components/metallb.adoc:3
msgid ""
"MetalLB is a load-balancer implementation for bare-metal Kubernetes "
"clusters, using standard routing protocols."
msgstr ""

#. type: delimited block _
#: asciidoc/components/metallb.adoc:4
msgid ""
"In bare-metal environments, setting up network load balancers is notably "
"more complex than in cloud environments. Unlike the straightforward API "
"calls in cloud setups, bare metal requires either dedicated network "
"appliances or a combination of load balancers and Virtual IP (VIP) "
"configurations to manage High Availability (HA) or address the potential "
"Single Point of Failure (SPOF) inherent in a single node load balancer. "
"These configurations are not easily automated, posing challenges in "
"Kubernetes deployments where components dynamically scale up and down."
msgstr ""

#. type: delimited block _
#: asciidoc/components/metallb.adoc:5
msgid ""
"MetalLB addresses these challenges by harnessing the Kubernetes model to "
"create LoadBalancer type services as if they were operating in a cloud "
"environment, even on bare-metal setups."
msgstr ""

#. type: delimited block _
#: asciidoc/components/metallb.adoc:6
msgid ""
"There are two different approaches, via https://metallb.universe.tf/concepts/"
"layer2/[L2 mode] (using ARP _tricks_) or via https://metallb.universe.tf/"
"concepts/bgp/[BGP]. Mainly L2 does not need any special network gear but BGP "
"is in general better. It depends on the use cases."
msgstr ""

#. type: Title ==
#: asciidoc/components/metallb.adoc:7
#, no-wrap
msgid "How does SUSE Edge use MetalLB?"
msgstr ""

#. type: Plain text
#: asciidoc/components/metallb.adoc:8
msgid "SUSE Edge uses MetalLB in two key ways:"
msgstr ""

#. type: Plain text
#: asciidoc/components/metallb.adoc:9
msgid ""
"As a Load Balancer Solution: MetalLB serves as the Load Balancer solution "
"for bare-metal machines."
msgstr ""

#. type: Plain text
#: asciidoc/components/metallb.adoc:10
msgid ""
"For an HA K3s/RKE2 Setup: MetalLB allows for load balancing the Kubernetes "
"API using a Virtual IP address."
msgstr ""

#. type: delimited block =
#: asciidoc/components/metallb.adoc:11
msgid ""
"In order to be able to expose the API, the `endpoint-copier-operator` is "
"used to keep in sync the K8s API endpoints from the 'kubernetes' service to "
"a 'kubernetes-vip' LoadBalancer service."
msgstr ""

#. type: Plain text
#: asciidoc/components/metallb.adoc:13
msgid ""
"Installation of MetalLB in L2 mode is detailed in <<guides-metallb-k3s,the "
"MetalLB guide>>."
msgstr ""

#. type: Plain text
#: asciidoc/components/metallb.adoc:14
msgid ""
"A guide on installing MetalLB in front of the kube-api-server to achieve HA "
"setups can be found in the <<guides-metallb-kubernetes,MetalLB in front of "
"the Kubernetes API server>> tutorial."
msgstr ""

#. type: Plain text
#: asciidoc/components/metallb.adoc:16
msgid ""
"K3S LoadBalancer Solution: K3S comes with its Load Balancer solution, "
"`Klipper`. To use MetalLB, Klipper must be disabled. This can be done by "
"starting the K3s server with the `--disable servicelb` option, as described "
"in the https://docs.k3s.io/networking[K3s documentation]."
msgstr ""

#. type: Title =
#: asciidoc/components/networking.adoc:1
#, no-wrap
msgid "Edge Networking"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:2
msgid ""
"This section describes the approach to network configuration in the SUSE "
"Edge solution.  We will show how to configure NetworkManager on SLE Micro in "
"a declarative manner, and explain how the related tools are integrated."
msgstr ""

#. type: Title ==
#: asciidoc/components/networking.adoc:3
#, no-wrap
msgid "Overview of NetworkManager"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:4
msgid ""
"NetworkManager is a tool that manages the primary network connection and "
"other connection interfaces."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:5
msgid ""
"NetworkManager stores network configurations as connection files that "
"contain the desired state.  These connections are stored as files in the `/"
"etc/NetworkManager/system-connections/` directory."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:6
msgid ""
"Details about NetworkManager can be found in the https://documentation.suse."
"com/sle-micro/5.5/html/SLE-Micro-all/cha-nm-configuration.html[upstream SLE "
"Micro documentation]."
msgstr ""

#. type: Title ==
#: asciidoc/components/networking.adoc:7
#, no-wrap
msgid "Overview of nmstate"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:8
msgid ""
"nmstate is a widely adopted library (with an accompanying CLI tool) which "
"offers a declarative API for network configurations via a predefined schema."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:9
msgid ""
"Details about nmstate can be found in the https://nmstate.io/[upstream "
"documentation]."
msgstr ""

#. type: Title ==
#: asciidoc/components/networking.adoc:10
#, no-wrap
msgid "Enter: NetworkManager Configurator (nmc)"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:11
msgid ""
"The network customization options available in SUSE Edge are achieved via a "
"CLI tool called NetworkManager Configurator or _nmc_ for short.  It is "
"leveraging the functionality provided by the nmstate library and, as such, "
"it is fully capable of configuring static IP addresses, DNS servers, VLANs, "
"bonding, bridges, etc.  This tool allows us to generate network "
"configurations from predefined desired states and to apply those across many "
"different nodes in an automated fashion."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:12
msgid ""
"Details about the NetworkManager Configurator (nmc) can be found in the "
"https://github.com/suse-edge/nm-configurator[upstream repository]."
msgstr ""

#. type: Title ==
#: asciidoc/components/networking.adoc:13
#, no-wrap
msgid "How does SUSE Edge use NetworkManager Configurator?"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:14
msgid ""
"SUSE Edge utilizes _nmc_ for the network customizations in the various "
"different provisioning models:"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:15
msgid ""
"Custom network configurations in the Direct Network Provisioning scenarios "
"(<<quickstart-metal3>>)"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:16
msgid ""
"Declarative static configurations in the Image Based Provisioning scenarios "
"(<<quickstart-eib>>)"
msgstr ""

#. type: Title ==
#: asciidoc/components/networking.adoc:17
#, no-wrap
msgid "Configuring with Edge Image Builder"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:18
msgid ""
"Edge Image Builder (EIB) is a tool which enables configuring multiple hosts "
"with a single OS image.  In this section we'll show how you can use a "
"declarative approach to describe the desired network states, how those are "
"converted to the respective NetworkManager connections, and are then applied "
"during the provisioning process."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:20
msgid ""
"If you're following this guide, it's assumed that you've got the following "
"already available:"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:21
msgid ""
"An x86_64 physical host (or virtual machine) running SLES 15 SP5 or openSUSE "
"Leap 15.5"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:22
msgid "An available container runtime (e.g. Podman)"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:23
msgid ""
"A copy of the SLE Micro 5.5 RAW image found https://www.suse.com/download/"
"sle-micro/[here]"
msgstr ""

#. type: Title ===
#: asciidoc/components/networking.adoc:24
#, no-wrap
msgid "Getting the Edge Image Builder container image"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:25
msgid ""
"The EIB container image is publicly available and can be downloaded from the "
"SUSE Edge registry by running:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:26
#, no-wrap
msgid "podman pull registry.suse.com/edge/edge-image-builder:1.0.2\n"
msgstr ""

#. type: Title ===
#: asciidoc/components/networking.adoc:27
#, no-wrap
msgid "Creating the image configuration directory [[image-config-dir-creation]]"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:28
msgid "Let's start with creating the configuration directory:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:29
#, no-wrap
msgid ""
"export CONFIG_DIR=$HOME/eib\n"
"mkdir -p $CONFIG_DIR/base-images\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:30
msgid ""
"We will now ensure that the downloaded base image copy is moved over to the "
"configuration directory:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:31
#, no-wrap
msgid "mv /path/to/downloads/SLE-Micro.x86_64-5.5.0-Default-GM.raw $CONFIG_DIR/base-images/\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:32
msgid "NOTE: EIB is never going to modify the base image input."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:33
#: asciidoc/components/networking.adoc:41
#: asciidoc/components/networking.adoc:62
#: asciidoc/components/networking.adoc:175
msgid ""
"The configuration directory at this point should look like the following:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:34
#, no-wrap
msgid ""
"└── base-images/\n"
"    └── SLE-Micro.x86_64-5.5.0-Default-GM.raw\n"
msgstr ""

#. type: Title ===
#: asciidoc/components/networking.adoc:35
#, no-wrap
msgid "Creating the image definition file"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:36
msgid ""
"The definition file describes the majority of configurable options that the "
"Edge Image Builder supports."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:37
msgid "Let's start with a very basic definition file for our OS image:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:38
#, no-wrap
msgid ""
"cat << EOF > $CONFIG_DIR/definition.yaml\n"
"apiVersion: 1.0\n"
"image:\n"
"  arch: x86_64\n"
"  imageType: raw\n"
"  baseImage: SLE-Micro.x86_64-5.5.0-Default-GM.raw\n"
"  outputImageName: modified-image.raw\n"
"operatingSystem:\n"
"  users:\n"
"    - username: root\n"
"      encryptedPassword: $6$jHugJNNd3HElGsUZ$eodjVe4te5ps44SVcWshdfWizrP.xAyd71CVEXazBJ/.v799/WRCBXxfYmunlBO2yp1hm/zb4r8EmnrrNCF.P/\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:39
msgid ""
"The `image` section is required, and it specifies the input image, its "
"architecture and type, as well as what the output image will be called.  The "
"`operatingSystem` section is optional, and contains configuration to enable "
"login on the provisioned systems with the `root/eib` username/password."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:40
msgid ""
"NOTE: Feel free to use your own encrypted password by running `openssl "
"passwd -6 <password>`."
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:42
#, no-wrap
msgid ""
"├── definition.yaml\n"
"└── base-images/\n"
"    └── SLE-Micro.x86_64-5.5.0-Default-GM.raw\n"
msgstr ""

#. type: Title ===
#: asciidoc/components/networking.adoc:43
#, no-wrap
msgid "Defining the network configurations [[default-network-definition]]"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:44
msgid ""
"The desired network configurations are not part of the image definition file "
"that we just created.  We'll now populate those under the special `network/` "
"directory. Let's create it:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:45
#: asciidoc/components/networking.adoc:137
#: asciidoc/components/networking.adoc:168
#, no-wrap
msgid "mkdir -p $CONFIG_DIR/network\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:46
msgid ""
"As previously mentioned, the NetworkManager Configurator (_nmc_) tool "
"expects an input in the form of predefined schema.  You can find how to set "
"up a wide variety of different networking options in the https://nmstate.io/"
"examples.html[upstream NMState examples documentation]."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:47
msgid ""
"This guide will explain how to configure the networking on three different "
"nodes:"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:48
msgid "A node which uses two Ethernet interfaces"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:49
msgid "A node which uses network bonding"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:50
msgid "A node which uses a network bridge"
msgstr ""

#. type: delimited block =
#: asciidoc/components/networking.adoc:51
msgid ""
"Using completely different network setups is not recommended in production "
"builds, especially if configuring Kubernetes clusters.  Networking "
"configurations should generally be homogeneous amongst nodes or at least "
"amongst roles within a given cluster.  This guide is including various "
"different options only to serve as an example reference."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:52
msgid ""
"NOTE: The following assumes a default `libvirt` network with an IP address "
"range `192.168.122.1/24`.  Adjust accordingly if this differs in your "
"environment."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:53
msgid ""
"Let's create the desired states for the first node which we will call `node1."
"suse.com`:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:54
#, no-wrap
msgid ""
"cat << EOF > $CONFIG_DIR/network/node1.suse.com.yaml\n"
"routes:\n"
"  config:\n"
"    - destination: 0.0.0.0/0\n"
"      metric: 100\n"
"      next-hop-address: 192.168.122.1\n"
"      next-hop-interface: eth0\n"
"      table-id: 254\n"
"    - destination: 192.168.122.0/24\n"
"      metric: 100\n"
"      next-hop-address:\n"
"      next-hop-interface: eth0\n"
"      table-id: 254\n"
"dns-resolver:\n"
"  config:\n"
"    server:\n"
"      - 192.168.122.1\n"
"      - 8.8.8.8\n"
"interfaces:\n"
"  - name: eth0\n"
"    type: ethernet\n"
"    state: up\n"
"    mac-address: 34:8A:B1:4B:16:E1\n"
"    ipv4:\n"
"      address:\n"
"        - ip: 192.168.122.50\n"
"          prefix-length: 24\n"
"      dhcp: false\n"
"      enabled: true\n"
"    ipv6:\n"
"      enabled: false\n"
"  - name: eth3\n"
"    type: ethernet\n"
"    state: down\n"
"    mac-address: 34:8A:B1:4B:16:E2\n"
"    ipv4:\n"
"      address:\n"
"        - ip: 192.168.122.55\n"
"          prefix-length: 24\n"
"      dhcp: false\n"
"      enabled: true\n"
"    ipv6:\n"
"      enabled: false\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:55
msgid ""
"In this example we define a desired state of two Ethernet interfaces (eth0 "
"and eth3), their requested IP addresses, routing, and DNS resolution."
msgstr ""

#. type: delimited block =
#: asciidoc/components/networking.adoc:56
msgid ""
"You must ensure that the MAC addresses of all Ethernet interfaces are "
"listed.  Those are used during the provisioning process as the identifiers "
"of the nodes and serve to determine which configurations should be applied.  "
"This is how we are able to configure multiple nodes using a single ISO or "
"RAW image."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:57
msgid ""
"Next up is the second node which we will call `node2.suse.com` and which "
"will use network bonding:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:58
#, no-wrap
msgid ""
"cat << EOF > $CONFIG_DIR/network/node2.suse.com.yaml\n"
"routes:\n"
"  config:\n"
"    - destination: 0.0.0.0/0\n"
"      metric: 100\n"
"      next-hop-address: 192.168.122.1\n"
"      next-hop-interface: bond99\n"
"      table-id: 254\n"
"    - destination: 192.168.122.0/24\n"
"      metric: 100\n"
"      next-hop-address:\n"
"      next-hop-interface: bond99\n"
"      table-id: 254\n"
"dns-resolver:\n"
"  config:\n"
"    server:\n"
"      - 192.168.122.1\n"
"      - 8.8.8.8\n"
"interfaces:\n"
"  - name: bond99\n"
"    type: bond\n"
"    state: up\n"
"    ipv4:\n"
"      address:\n"
"        - ip: 192.168.122.60\n"
"          prefix-length: 24\n"
"      enabled: true\n"
"    link-aggregation:\n"
"      mode: balance-rr\n"
"      options:\n"
"        miimon: '140'\n"
"      port:\n"
"        - eth0\n"
"        - eth1\n"
"  - name: eth0\n"
"    type: ethernet\n"
"    state: up\n"
"    mac-address: 34:8A:B1:4B:16:E3\n"
"    ipv4:\n"
"      enabled: false\n"
"    ipv6:\n"
"      enabled: false\n"
"  - name: eth1\n"
"    type: ethernet\n"
"    state: up\n"
"    mac-address: 34:8A:B1:4B:16:E4\n"
"    ipv4:\n"
"      enabled: false\n"
"    ipv6:\n"
"      enabled: false\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:59
msgid ""
"In this example we define a desired state of two Ethernet interfaces (eth0 "
"and eth1) which are not enabling IP addressing, as well as a bond with a "
"round-robin policy and its respective address which is going to be used to "
"forward the network traffic."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:60
msgid ""
"Lastly, we'll create the third and final desired state file which will be "
"utilizing a network bridge and which we'll call `node3.suse.com`:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:61
#, no-wrap
msgid ""
"cat << EOF > $CONFIG_DIR/network/node3.suse.com.yaml\n"
"routes:\n"
"  config:\n"
"    - destination: 0.0.0.0/0\n"
"      metric: 100\n"
"      next-hop-address: 192.168.122.1\n"
"      next-hop-interface: linux-br0\n"
"      table-id: 254\n"
"    - destination: 192.168.122.0/24\n"
"      metric: 100\n"
"      next-hop-address:\n"
"      next-hop-interface: linux-br0\n"
"      table-id: 254\n"
"dns-resolver:\n"
"  config:\n"
"    server:\n"
"      - 192.168.122.1\n"
"      - 8.8.8.8\n"
"interfaces:\n"
"  - name: eth0\n"
"    type: ethernet\n"
"    state: up\n"
"    mac-address: 34:8A:B1:4B:16:E5\n"
"    ipv4:\n"
"      enabled: false\n"
"    ipv6:\n"
"      enabled: false\n"
"  - name: linux-br0\n"
"    type: linux-bridge\n"
"    state: up\n"
"    ipv4:\n"
"      address:\n"
"        - ip: 192.168.122.70\n"
"          prefix-length: 24\n"
"      dhcp: false\n"
"      enabled: true\n"
"    bridge:\n"
"      options:\n"
"        group-forward-mask: 0\n"
"        mac-ageing-time: 300\n"
"        multicast-snooping: true\n"
"        stp:\n"
"          enabled: true\n"
"          forward-delay: 15\n"
"          hello-time: 2\n"
"          max-age: 20\n"
"          priority: 32768\n"
"      port:\n"
"        - name: eth0\n"
"          stp-hairpin-mode: false\n"
"          stp-path-cost: 100\n"
"          stp-priority: 32\n"
"EOF\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:63
#, no-wrap
msgid ""
"├── definition.yaml\n"
"├── network/\n"
"│   │── node1.suse.com.yaml\n"
"│   │── node2.suse.com.yaml\n"
"│   └── node3.suse.com.yaml\n"
"└── base-images/\n"
"    └── SLE-Micro.x86_64-5.5.0-Default-GM.raw\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:64
msgid ""
"NOTE: The names of the files under the `network/` directory are "
"intentional.  They correspond to the hostnames which will be set during the "
"provisioning process."
msgstr ""

#. type: Title ===
#: asciidoc/components/networking.adoc:65
#, no-wrap
msgid "Building the OS image"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:66
msgid ""
"Now that all the necessary configurations are in place, we can build the "
"image by simply running:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:67
#: asciidoc/components/networking.adoc:140
#: asciidoc/components/networking.adoc:178
#, no-wrap
msgid "podman run --rm -it -v $CONFIG_DIR:/eib registry.suse.com/edge/edge-image-builder:1.0.2 build --definition-file definition.yaml\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:68
msgid "The output should be similar to the following:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:69
#, no-wrap
msgid ""
"Generating image customization components...\n"
"Identifier ................... [SUCCESS]\n"
"Custom Files ................. [SKIPPED]\n"
"Time ......................... [SKIPPED]\n"
"Network ...................... [SUCCESS]\n"
"Groups ....................... [SKIPPED]\n"
"Users ........................ [SUCCESS]\n"
"Proxy ........................ [SKIPPED]\n"
"Rpm .......................... [SKIPPED]\n"
"Systemd ...................... [SKIPPED]\n"
"Elemental .................... [SKIPPED]\n"
"Suma ......................... [SKIPPED]\n"
"Embedded Artifact Registry ... [SKIPPED]\n"
"Keymap ....................... [SUCCESS]\n"
"Kubernetes ................... [SKIPPED]\n"
"Certificates ................. [SKIPPED]\n"
"Building RAW image...\n"
"Kernel Params ................ [SKIPPED]\n"
"Image build complete!\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:70
msgid ""
"The snippet above tells us that the `Network` component has successfully "
"been configured, and we can proceed with provisioning our edge nodes."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:71
msgid ""
"NOTE: A log file (`network-config.log`) and the respective NetworkManager "
"connection files can be inspected in the resulting `_build` directory under "
"a timestamped directory for the image run."
msgstr ""

#. type: Title ===
#: asciidoc/components/networking.adoc:72
#, no-wrap
msgid "Provisioning the edge nodes"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:73
msgid "Let's copy the resulting RAW image:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:74
#, no-wrap
msgid ""
"mkdir edge-nodes && cd edge-nodes\n"
"for i in {1..4}; do cp $CONFIG_DIR/modified-image.raw node$i.raw; done\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:75
msgid ""
"You will notice that we copied the built image four times but only specified "
"the network configurations for three nodes.  This is because we also want to "
"showcase what will happen if we provision a node which does not match any of "
"the desired configurations."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:76
msgid ""
"NOTE: This guide will use virtualization for the node provisioning examples. "
"Ensure the necessary extensions are enabled in the BIOS (see https://"
"documentation.suse.com/sles/15-SP5/html/SLES-all/cha-virt-support.html#sec-"
"kvm-requires-hardware[here] for details)."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:77
msgid ""
"We will be using `virt-install` to create virtual machines using the copied "
"raw disks.  Each virtual machine will be using 10 GB of RAM and 6 vCPUs."
msgstr ""

#. type: Title ====
#: asciidoc/components/networking.adoc:78
#, no-wrap
msgid "Provisioning the first node"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:79
#: asciidoc/components/networking.adoc:105
#: asciidoc/components/networking.adoc:114
#: asciidoc/components/networking.adoc:124
msgid "Let's create the virtual machine:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:80
#, no-wrap
msgid "virt-install --name node1 --ram 10000 --vcpus 6 --disk path=node1.raw,format=raw --osinfo detect=on,name=sle-unknown --graphics none --console pty,target_type=serial --network default,mac=34:8A:B1:4B:16:E1 --network default,mac=34:8A:B1:4B:16:E2 --virt-type kvm --import\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:81
msgid ""
"NOTE: It is important that we create the network interfaces with the same "
"MAC addresses as the ones in the desired state we described above."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:82
msgid ""
"Once the operation is complete, we will see something similar to the "
"following:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:83
#, no-wrap
msgid ""
"Starting install...\n"
"Creating domain...\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:84
#, no-wrap
msgid ""
"Running text console command: virsh --connect qemu:///system console node1\n"
"Connected to domain 'node1'\n"
"Escape character is ^] (Ctrl + ])\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:85
#, no-wrap
msgid "Welcome to SUSE Linux Enterprise Micro 5.5  (x86_64) - Kernel 5.14.21-150500.55.19-default (ttyS0).\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:86
#, no-wrap
msgid ""
"SSH host key: SHA256:XN/R5Tw43reG+QsOw480LxCnhkc/1uqMdwlI6KUBY70 (RSA)\n"
"SSH host key: SHA256:/96yGrPGKlhn04f1rb9cXv/2WJt4TtrIN5yEcN66r3s (DSA)\n"
"SSH host key: SHA256:Dy/YjBQ7LwjZGaaVcMhTWZNSOstxXBsPsvgJTJq5t00 (ECDSA)\n"
"SSH host key: SHA256:TNGqY1LRddpxD/jn/8dkT/9YmVl9hiwulqmayP+wOWQ (ED25519)\n"
"eth0: 192.168.122.50\n"
"eth1:\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:87
#, no-wrap
msgid ""
"Configured with the Edge Image Builder\n"
"Activate the web console with: systemctl enable --now cockpit.socket\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:88
#, no-wrap
msgid "node1 login:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:89
msgid ""
"We're now able to log in with the `root:eib` credentials pair.  We're also "
"able to SSH into the host if we prefer that over the `virsh console` we're "
"presented with here."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:90
msgid "Once logged in, let's confirm that all the settings are in place."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:91
msgid "Verify that the hostname is properly set:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:92
#, no-wrap
msgid ""
"node1:~ # hostnamectl\n"
" Static hostname: node1.suse.com\n"
" ...\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:93
#: asciidoc/components/networking.adoc:144
#: asciidoc/components/networking.adoc:182
msgid "Verify that the routing is properly configured:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:94
#, no-wrap
msgid ""
"node1:~ # ip r\n"
"default via 192.168.122.1 dev eth0 proto static metric 100\n"
"192.168.122.0/24 dev eth0 proto static scope link metric 100\n"
"192.168.122.0/24 dev eth0 proto kernel scope link src 192.168.122.50 metric 100\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:95
#: asciidoc/components/networking.adoc:146
#: asciidoc/components/networking.adoc:184
msgid "Verify that Internet connection is available:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:96
#, no-wrap
msgid ""
"node1:~ # ping google.com\n"
"PING google.com (142.250.72.78) 56(84) bytes of data.\n"
"64 bytes from den16s09-in-f14.1e100.net (142.250.72.78): icmp_seq=1 ttl=56 time=13.2 ms\n"
"64 bytes from den16s09-in-f14.1e100.net (142.250.72.78): icmp_seq=2 ttl=56 time=13.4 ms\n"
"^C\n"
"--- google.com ping statistics ---\n"
"2 packets transmitted, 2 received, 0% packet loss, time 1002ms\n"
"rtt min/avg/max/mdev = 13.248/13.304/13.361/0.056 ms\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:97
msgid ""
"Verify that exactly two Ethernet interfaces are configured and only one of "
"those is active:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:98
#, no-wrap
msgid ""
"node1:~ # ip a\n"
"1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n"
"    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n"
"    inet 127.0.0.1/8 scope host lo\n"
"       valid_lft forever preferred_lft forever\n"
"    inet6 ::1/128 scope host\n"
"       valid_lft forever preferred_lft forever\n"
"2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n"
"    link/ether 34:8a:b1:4b:16:e1 brd ff:ff:ff:ff:ff:ff\n"
"    altname enp0s2\n"
"    altname ens2\n"
"    inet 192.168.122.50/24 brd 192.168.122.255 scope global noprefixroute eth0\n"
"       valid_lft forever preferred_lft forever\n"
"3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n"
"    link/ether 34:8a:b1:4b:16:e2 brd ff:ff:ff:ff:ff:ff\n"
"    altname enp0s3\n"
"    altname ens3\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:99
#, no-wrap
msgid ""
"node1:~ # nmcli -f NAME,UUID,TYPE,DEVICE,FILENAME con show\n"
"NAME  UUID                                  TYPE      DEVICE  FILENAME\n"
"eth0  dfd202f5-562f-5f07-8f2a-a7717756fb70  ethernet  eth0    /etc/NetworkManager/system-connections/eth0.nmconnection\n"
"eth1  7e211aea-3d14-59cf-a4fa-be91dac5dbba  ethernet  --      /etc/NetworkManager/system-connections/eth1.nmconnection\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:100
msgid ""
"You'll notice that the second interface is `eth1` instead of the predefined "
"`eth3` in our desired networking state.  This is the case because the "
"NetworkManager Configurator (_nmc_) is able to detect that the OS has given "
"a different name for the NIC with MAC address `34:8a:b1:4b:16:e2` and it "
"adjusts its settings accordingly."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:101
msgid ""
"Verify this has indeed happened by inspecting the Combustion phase of the "
"provisioning:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:102
#, no-wrap
msgid ""
"node1:~ # journalctl -u combustion | grep nmc\n"
"Apr 23 09:20:19 localhost.localdomain combustion[1360]: [2024-04-23T09:20:19Z INFO  nmc::apply_conf] Identified host: node1.suse.com\n"
"Apr 23 09:20:19 localhost.localdomain combustion[1360]: [2024-04-23T09:20:19Z INFO  nmc::apply_conf] Set hostname: node1.suse.com\n"
"Apr 23 09:20:19 localhost.localdomain combustion[1360]: [2024-04-23T09:20:19Z INFO  nmc::apply_conf] Processing interface 'eth0'...\n"
"Apr 23 09:20:19 localhost.localdomain combustion[1360]: [2024-04-23T09:20:19Z INFO  nmc::apply_conf] Processing interface 'eth3'...\n"
"Apr 23 09:20:19 localhost.localdomain combustion[1360]: [2024-04-23T09:20:19Z INFO  nmc::apply_conf] Using interface name 'eth1' instead of the preconfigured 'eth3'\n"
"Apr 23 09:20:19 localhost.localdomain combustion[1360]: [2024-04-23T09:20:19Z INFO  nmc] Successfully applied config\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:103
msgid ""
"We will now provision the rest of the nodes, but we will only show the "
"differences in the final configuration.  Feel free to apply any or all of "
"the above checks for all nodes you are about to provision."
msgstr ""

#. type: Title ====
#: asciidoc/components/networking.adoc:104
#, no-wrap
msgid "Provisioning the second node"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:106
#, no-wrap
msgid "virt-install --name node2 --ram 10000 --vcpus 6 --disk path=node2.raw,format=raw --osinfo detect=on,name=sle-unknown --graphics none --console pty,target_type=serial --network default,mac=34:8A:B1:4B:16:E3 --network default,mac=34:8A:B1:4B:16:E4 --virt-type kvm --import\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:107
msgid ""
"Once the virtual machine is up and running, we can confirm that this node is "
"using bonded interfaces:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:108
#, no-wrap
msgid ""
"node2:~ # ip a\n"
"1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n"
"    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n"
"    inet 127.0.0.1/8 scope host lo\n"
"       valid_lft forever preferred_lft forever\n"
"    inet6 ::1/128 scope host\n"
"       valid_lft forever preferred_lft forever\n"
"2: eth0: <BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master bond99 state UP group default qlen 1000\n"
"    link/ether 34:8a:b1:4b:16:e3 brd ff:ff:ff:ff:ff:ff\n"
"    altname enp0s2\n"
"    altname ens2\n"
"3: eth1: <BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master bond99 state UP group default qlen 1000\n"
"    link/ether 34:8a:b1:4b:16:e3 brd ff:ff:ff:ff:ff:ff permaddr 34:8a:b1:4b:16:e4\n"
"    altname enp0s3\n"
"    altname ens3\n"
"4: bond99: <BROADCAST,MULTICAST,MASTER,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000\n"
"    link/ether 34:8a:b1:4b:16:e3 brd ff:ff:ff:ff:ff:ff\n"
"    inet 192.168.122.60/24 brd 192.168.122.255 scope global noprefixroute bond99\n"
"       valid_lft forever preferred_lft forever\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:109
msgid "Confirm that the routing is using the bond:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:110
#, no-wrap
msgid ""
"node2:~ # ip r\n"
"default via 192.168.122.1 dev bond99 proto static metric 100\n"
"192.168.122.0/24 dev bond99 proto static scope link metric 100\n"
"192.168.122.0/24 dev bond99 proto kernel scope link src 192.168.122.60 metric 300\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:111
#: asciidoc/components/networking.adoc:120
msgid "Ensure that the static connection files are properly utilized:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:112
#, no-wrap
msgid ""
"node2:~ # nmcli -f NAME,UUID,TYPE,DEVICE,FILENAME con show\n"
"NAME    UUID                                  TYPE      DEVICE  FILENAME\n"
"bond99  4a920503-4862-5505-80fd-4738d07f44c6  bond      bond99  /etc/NetworkManager/system-connections/bond99.nmconnection\n"
"eth0    dfd202f5-562f-5f07-8f2a-a7717756fb70  ethernet  eth0    /etc/NetworkManager/system-connections/eth0.nmconnection\n"
"eth1    0523c0a1-5f5e-5603-bcf2-68155d5d322e  ethernet  eth1    /etc/NetworkManager/system-connections/eth1.nmconnection\n"
msgstr ""

#. type: Title ====
#: asciidoc/components/networking.adoc:113
#, no-wrap
msgid "Provisioning the third node"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:115
#, no-wrap
msgid "virt-install --name node3 --ram 10000 --vcpus 6 --disk path=node3.raw,format=raw --osinfo detect=on,name=sle-unknown --graphics none --console pty,target_type=serial --network default,mac=34:8A:B1:4B:16:E5 --virt-type kvm --import\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:116
msgid ""
"Once the virtual machine is up and running, we can confirm that this node is "
"using a network bridge:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:117
#, no-wrap
msgid ""
"node3:~ # ip a\n"
"1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n"
"    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n"
"    inet 127.0.0.1/8 scope host lo\n"
"       valid_lft forever preferred_lft forever\n"
"    inet6 ::1/128 scope host\n"
"       valid_lft forever preferred_lft forever\n"
"2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master linux-br0 state UP group default qlen 1000\n"
"    link/ether 34:8a:b1:4b:16:e5 brd ff:ff:ff:ff:ff:ff\n"
"    altname enp0s2\n"
"    altname ens2\n"
"3: linux-br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000\n"
"    link/ether 34:8a:b1:4b:16:e5 brd ff:ff:ff:ff:ff:ff\n"
"    inet 192.168.122.70/24 brd 192.168.122.255 scope global noprefixroute linux-br0\n"
"       valid_lft forever preferred_lft forever\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:118
msgid "Confirm that the routing is using the bridge:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:119
#, no-wrap
msgid ""
"node3:~ # ip r\n"
"default via 192.168.122.1 dev linux-br0 proto static metric 100\n"
"192.168.122.0/24 dev linux-br0 proto static scope link metric 100\n"
"192.168.122.0/24 dev linux-br0 proto kernel scope link src 192.168.122.70 metric 425\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:121
#, no-wrap
msgid ""
"node3:~ # nmcli -f NAME,UUID,TYPE,DEVICE,FILENAME con show\n"
"NAME       UUID                                  TYPE      DEVICE     FILENAME\n"
"linux-br0  1f8f1469-ed20-5f2c-bacb-a6767bee9bc0  bridge    linux-br0  /etc/NetworkManager/system-connections/linux-br0.nmconnection\n"
"eth0       dfd202f5-562f-5f07-8f2a-a7717756fb70  ethernet  eth0       /etc/NetworkManager/system-connections/eth0.nmconnection\n"
msgstr ""

#. type: Title ====
#: asciidoc/components/networking.adoc:122
#, no-wrap
msgid "Provisioning the fourth node"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:123
msgid ""
"Lastly, we will provision a node which will not match any of the predefined "
"configurations by a MAC address.  In these cases, we will default to DHCP to "
"configure the network interfaces."
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:125
#, no-wrap
msgid "virt-install --name node4 --ram 10000 --vcpus 6 --disk path=node4.raw,format=raw --osinfo detect=on,name=sle-unknown --graphics none --console pty,target_type=serial --network default --virt-type kvm --import\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:126
msgid ""
"Once the virtual machine is up and running, we can confirm that this node is "
"using a random IP address for its network interface:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:127
#, no-wrap
msgid ""
"localhost:~ # ip a\n"
"1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n"
"    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n"
"    inet 127.0.0.1/8 scope host lo\n"
"       valid_lft forever preferred_lft forever\n"
"    inet6 ::1/128 scope host\n"
"       valid_lft forever preferred_lft forever\n"
"2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n"
"    link/ether 52:54:00:56:63:71 brd ff:ff:ff:ff:ff:ff\n"
"    altname enp0s2\n"
"    altname ens2\n"
"    inet 192.168.122.86/24 brd 192.168.122.255 scope global dynamic noprefixroute eth0\n"
"       valid_lft 3542sec preferred_lft 3542sec\n"
"    inet6 fe80::5054:ff:fe56:6371/64 scope link noprefixroute\n"
"       valid_lft forever preferred_lft forever\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:128
msgid "Verify that nmc failed to apply static configurations for this node:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:129
#, no-wrap
msgid ""
"localhost:~ # journalctl -u combustion | grep nmc\n"
"Apr 23 12:15:45 localhost.localdomain combustion[1357]: [2024-04-23T12:15:45Z ERROR nmc] Applying config failed: None of the preconfigured hosts match local NICs\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:130
msgid "Verify that the Ethernet interface was configured via DHCP:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:131
#, no-wrap
msgid ""
"localhost:~ # journalctl | grep eth0\n"
"Apr 23 12:15:29 localhost.localdomain NetworkManager[704]: <info>  [1713874529.7801] manager: (eth0): new Ethernet device (/org/freedesktop/NetworkManager/Devices/2)\n"
"Apr 23 12:15:29 localhost.localdomain NetworkManager[704]: <info>  [1713874529.7802] device (eth0): state change: unmanaged -> unavailable (reason 'managed', sys-iface-state: 'external')\n"
"Apr 23 12:15:29 localhost.localdomain NetworkManager[704]: <info>  [1713874529.7929] device (eth0): carrier: link connected\n"
"Apr 23 12:15:29 localhost.localdomain NetworkManager[704]: <info>  [1713874529.7931] device (eth0): state change: unavailable -> disconnected (reason 'carrier-changed', sys-iface-state: 'managed')\n"
"Apr 23 12:15:29 localhost.localdomain NetworkManager[704]: <info>  [1713874529.7944] device (eth0): Activation: starting connection 'Wired Connection' (300ed658-08d4-4281-9f8c-d1b8882d29b9)\n"
"Apr 23 12:15:29 localhost.localdomain NetworkManager[704]: <info>  [1713874529.7945] device (eth0): state change: disconnected -> prepare (reason 'none', sys-iface-state: 'managed')\n"
"Apr 23 12:15:29 localhost.localdomain NetworkManager[704]: <info>  [1713874529.7947] device (eth0): state change: prepare -> config (reason 'none', sys-iface-state: 'managed')\n"
"Apr 23 12:15:29 localhost.localdomain NetworkManager[704]: <info>  [1713874529.7953] device (eth0): state change: config -> ip-config (reason 'none', sys-iface-state: 'managed')\n"
"Apr 23 12:15:29 localhost.localdomain NetworkManager[704]: <info>  [1713874529.7964] dhcp4 (eth0): activation: beginning transaction (timeout in 90 seconds)\n"
"Apr 23 12:15:33 localhost.localdomain NetworkManager[704]: <info>  [1713874533.1272] dhcp4 (eth0): state changed new lease, address=192.168.122.86\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:132
#, no-wrap
msgid ""
"localhost:~ # nmcli -f NAME,UUID,TYPE,DEVICE,FILENAME con show\n"
"NAME              UUID                                  TYPE      DEVICE  FILENAME\n"
"Wired Connection  300ed658-08d4-4281-9f8c-d1b8882d29b9  ethernet  eth0    /var/run/NetworkManager/system-connections/default_connection.nmconnection\n"
msgstr ""

#. type: Title ===
#: asciidoc/components/networking.adoc:133
#, no-wrap
msgid "Unified node configurations"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:134
msgid ""
"There are occasions where relying on known MAC addresses is not an option. "
"In these cases we can opt for the so-called _unified configuration_ which "
"allows us to specify settings in an `_all.yaml` file which will then be "
"applied across all provisioned nodes."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:135
#: asciidoc/components/networking.adoc:160
msgid ""
"We will build and provision an edge node using different configuration "
"structure. Follow all steps starting from <<image-config-dir-creation>> up "
"until <<default-network-definition>>."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:136
msgid ""
"In this example we define a desired state of two Ethernet interfaces (eth0 "
"and eth1) - one using DHCP, and one assigned a static IP address."
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:138
#, no-wrap
msgid ""
"cat <<- EOF > $CONFIG_DIR/network/_all.yaml\n"
"interfaces:\n"
"- name: eth0\n"
"  type: ethernet\n"
"  state: up\n"
"  ipv4:\n"
"    dhcp: true\n"
"    enabled: true\n"
"  ipv6:\n"
"    enabled: false\n"
"- name: eth1\n"
"  type: ethernet\n"
"  state: up\n"
"  ipv4:\n"
"    address:\n"
"    - ip: 10.0.0.1\n"
"      prefix-length: 24\n"
"    enabled: true\n"
"    dhcp: false\n"
"  ipv6:\n"
"    enabled: false\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:141
#: asciidoc/components/networking.adoc:179
msgid ""
"Once the image is successfully built, let's create a virtual machine using "
"it:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:142
#, no-wrap
msgid "virt-install --name node1 --ram 10000 --vcpus 6 --disk path=$CONFIG_DIR/modified-image.raw,format=raw --osinfo detect=on,name=sle-unknown --graphics none --console pty,target_type=serial --network default --network default --virt-type kvm --import\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:143
#: asciidoc/components/networking.adoc:181
msgid ""
"The provisioning process might take a few minutes. Once it's finished, log "
"in to the system with the provided credentials."
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:145
#, no-wrap
msgid ""
"localhost:~ # ip r\n"
"default via 192.168.122.1 dev eth0 proto dhcp src 192.168.122.100 metric 100\n"
"10.0.0.0/24 dev eth1 proto kernel scope link src 10.0.0.1 metric 101\n"
"192.168.122.0/24 dev eth0 proto kernel scope link src 192.168.122.100 metric 100\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:147
#, no-wrap
msgid ""
"localhost:~ # ping google.com\n"
"PING google.com (142.250.72.46) 56(84) bytes of data.\n"
"64 bytes from den16s08-in-f14.1e100.net (142.250.72.46): icmp_seq=1 ttl=56 time=14.3 ms\n"
"64 bytes from den16s08-in-f14.1e100.net (142.250.72.46): icmp_seq=2 ttl=56 time=14.2 ms\n"
"^C\n"
"--- google.com ping statistics ---\n"
"2 packets transmitted, 2 received, 0% packet loss, time 1001ms\n"
"rtt min/avg/max/mdev = 14.196/14.260/14.324/0.064 ms\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:148
msgid "Verify that the Ethernet interfaces are configured and active:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:149
#, no-wrap
msgid ""
"localhost:~ # ip a\n"
"1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n"
"    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n"
"    inet 127.0.0.1/8 scope host lo\n"
"       valid_lft forever preferred_lft forever\n"
"    inet6 ::1/128 scope host\n"
"       valid_lft forever preferred_lft forever\n"
"2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n"
"    link/ether 52:54:00:26:44:7a brd ff:ff:ff:ff:ff:ff\n"
"    altname enp1s0\n"
"    inet 192.168.122.100/24 brd 192.168.122.255 scope global dynamic noprefixroute eth0\n"
"       valid_lft 3505sec preferred_lft 3505sec\n"
"3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n"
"    link/ether 52:54:00:ec:57:9e brd ff:ff:ff:ff:ff:ff\n"
"    altname enp7s0\n"
"    inet 10.0.0.1/24 brd 10.0.0.255 scope global noprefixroute eth1\n"
"       valid_lft forever preferred_lft forever\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:150
#, no-wrap
msgid ""
"localhost:~ # nmcli -f NAME,UUID,TYPE,DEVICE,FILENAME con show\n"
"NAME  UUID                                  TYPE      DEVICE  FILENAME\n"
"eth0  dfd202f5-562f-5f07-8f2a-a7717756fb70  ethernet  eth0    /etc/NetworkManager/system-connections/eth0.nmconnection\n"
"eth1  0523c0a1-5f5e-5603-bcf2-68155d5d322e  ethernet  eth1    /etc/NetworkManager/system-connections/eth1.nmconnection\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:151
#, no-wrap
msgid ""
"localhost:~ # cat /etc/NetworkManager/system-connections/eth0.nmconnection\n"
"[connection]\n"
"autoconnect=true\n"
"autoconnect-slaves=-1\n"
"id=eth0\n"
"interface-name=eth0\n"
"type=802-3-ethernet\n"
"uuid=dfd202f5-562f-5f07-8f2a-a7717756fb70\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:152
#, no-wrap
msgid ""
"[ipv4]\n"
"dhcp-client-id=mac\n"
"dhcp-send-hostname=true\n"
"dhcp-timeout=2147483647\n"
"ignore-auto-dns=false\n"
"ignore-auto-routes=false\n"
"method=auto\n"
"never-default=false\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:153
#: asciidoc/components/networking.adoc:156
#, no-wrap
msgid ""
"[ipv6]\n"
"addr-gen-mode=0\n"
"dhcp-timeout=2147483647\n"
"method=disabled\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:154
#, no-wrap
msgid ""
"localhost:~ # cat /etc/NetworkManager/system-connections/eth1.nmconnection\n"
"[connection]\n"
"autoconnect=true\n"
"autoconnect-slaves=-1\n"
"id=eth1\n"
"interface-name=eth1\n"
"type=802-3-ethernet\n"
"uuid=0523c0a1-5f5e-5603-bcf2-68155d5d322e\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:155
#, no-wrap
msgid ""
"[ipv4]\n"
"address0=10.0.0.1/24\n"
"dhcp-timeout=2147483647\n"
"method=manual\n"
msgstr ""

#. type: Title ===
#: asciidoc/components/networking.adoc:157
#, no-wrap
msgid "Custom network configurations"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:158
msgid ""
"We have already covered the default network configuration for Edge Image "
"Builder which relies on the NetworkManager Configurator.  However, there is "
"also the option to modify it via a custom script. Whilst this option is very "
"flexible and is also not MAC address dependant, its limitation stems from "
"the fact that using it is much less convenient when bootstrapping multiple "
"nodes with a single image."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:159
msgid ""
"NOTE: It is recommended to use the default network configuration via files "
"describing the desired network states under the `/network` directory.  Only "
"opt for custom scripting when that behaviour is not applicable to your use "
"case."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:161
msgid ""
"In this example, we will create a custom script which applies static "
"configuration for the `eth0` interface on all provisioned nodes, as well as "
"removing and disabling the automatically created wired connections by "
"NetworkManager. This is beneficial in situations where you want to make sure "
"that every node in your cluster has an identical networking configuration, "
"and as such you do not need to be concerned with the MAC address of each "
"node prior to image creation."
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:162
msgid ""
"Let's start by storing the connection file in the `/custom/files` directory:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:163
#, no-wrap
msgid "mkdir -p $CONFIG_DIR/custom/files\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:164
#, no-wrap
msgid ""
"cat << EOF > $CONFIG_DIR/custom/files/eth0.nmconnection\n"
"[connection]\n"
"autoconnect=true\n"
"autoconnect-slaves=-1\n"
"autoconnect-retries=1\n"
"id=eth0\n"
"interface-name=eth0\n"
"type=802-3-ethernet\n"
"uuid=dfd202f5-562f-5f07-8f2a-a7717756fb70\n"
"wait-device-timeout=60000\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:165
#: asciidoc/components/networking.adoc:190
#, no-wrap
msgid ""
"[ipv4]\n"
"dhcp-timeout=2147483647\n"
"method=auto\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:166
#, no-wrap
msgid ""
"[ipv6]\n"
"addr-gen-mode=eui64\n"
"dhcp-timeout=2147483647\n"
"method=disabled\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:167
msgid ""
"Now that the static configuration is created, we will also create our custom "
"network script:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:169
#, no-wrap
msgid ""
"cat << EOF > $CONFIG_DIR/network/configure-network.sh\n"
"#!/bin/bash\n"
"set -eux\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:170
#, no-wrap
msgid ""
"# Remove and disable wired connections\n"
"mkdir -p /etc/NetworkManager/conf.d/\n"
"printf \"[main]\\nno-auto-default=*\\n\" > /etc/NetworkManager/conf.d/no-auto-default.conf\n"
"rm -f /var/run/NetworkManager/system-connections/* || true\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:171
#, no-wrap
msgid ""
"# Copy pre-configured network configuration files into NetworkManager\n"
"mkdir -p /etc/NetworkManager/system-connections/\n"
"cp eth0.nmconnection /etc/NetworkManager/system-connections/\n"
"chmod 600 /etc/NetworkManager/system-connections/*.nmconnection\n"
"EOF\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:172
#, no-wrap
msgid "chmod a+x $CONFIG_DIR/network/configure-network.sh\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:173
msgid ""
"NOTE: The nmc binary will still be included by default, so it can also be "
"used in the `configure-network.sh` script if necessary."
msgstr ""

#. type: delimited block =
#: asciidoc/components/networking.adoc:174
msgid ""
"The custom script must always be provided under `/network/configure-network."
"sh` in the configuration directory. If present, all other files will be "
"ignored.  It is NOT possible to configure a network by working with both "
"static configurations in YAML format and a custom script simultaneously."
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:176
#, no-wrap
msgid ""
"├── definition.yaml\n"
"├── custom/\n"
"│   └── files/\n"
"│       └── eth0.nmconnection\n"
"├── network/\n"
"│   └── configure-network.sh\n"
"└── base-images/\n"
"    └── SLE-Micro.x86_64-5.5.0-Default-GM.raw\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:180
#, no-wrap
msgid "virt-install --name node1 --ram 10000 --vcpus 6 --disk path=$CONFIG_DIR/modified-image.raw,format=raw --osinfo detect=on,name=sle-unknown --graphics none --console pty,target_type=serial --network default --virt-type kvm --import\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:183
#, no-wrap
msgid ""
"localhost:~ # ip r\n"
"default via 192.168.122.1 dev eth0 proto dhcp src 192.168.122.185 metric 100\n"
"192.168.122.0/24 dev eth0 proto kernel scope link src 192.168.122.185 metric 100\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:185
#, no-wrap
msgid ""
"localhost:~ # ping google.com\n"
"PING google.com (142.250.72.78) 56(84) bytes of data.\n"
"64 bytes from den16s09-in-f14.1e100.net (142.250.72.78): icmp_seq=1 ttl=56 time=13.6 ms\n"
"64 bytes from den16s09-in-f14.1e100.net (142.250.72.78): icmp_seq=2 ttl=56 time=13.6 ms\n"
"^C\n"
"--- google.com ping statistics ---\n"
"2 packets transmitted, 2 received, 0% packet loss, time 1001ms\n"
"rtt min/avg/max/mdev = 13.592/13.599/13.606/0.007 ms\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/networking.adoc:186
msgid ""
"Verify that an Ethernet interface is statically configured using our "
"connection file and is active:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:187
#, no-wrap
msgid ""
"localhost:~ # ip a\n"
"1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n"
"    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n"
"    inet 127.0.0.1/8 scope host lo\n"
"       valid_lft forever preferred_lft forever\n"
"    inet6 ::1/128 scope host\n"
"       valid_lft forever preferred_lft forever\n"
"2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n"
"    link/ether 52:54:00:31:d0:1b brd ff:ff:ff:ff:ff:ff\n"
"    altname enp0s2\n"
"    altname ens2\n"
"    inet 192.168.122.185/24 brd 192.168.122.255 scope global dynamic noprefixroute eth0\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:188
#, no-wrap
msgid ""
"localhost:~ # nmcli -f NAME,UUID,TYPE,DEVICE,FILENAME con show\n"
"NAME  UUID                                  TYPE      DEVICE  FILENAME\n"
"eth0  dfd202f5-562f-5f07-8f2a-a7717756fb70  ethernet  eth0    /etc/NetworkManager/system-connections/eth0.nmconnection\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:189
#, no-wrap
msgid ""
"localhost:~ # cat  /etc/NetworkManager/system-connections/eth0.nmconnection\n"
"[connection]\n"
"autoconnect=true\n"
"autoconnect-slaves=-1\n"
"autoconnect-retries=1\n"
"id=eth0\n"
"interface-name=eth0\n"
"type=802-3-ethernet\n"
"uuid=dfd202f5-562f-5f07-8f2a-a7717756fb70\n"
"wait-device-timeout=60000\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/networking.adoc:191
#, no-wrap
msgid ""
"[ipv6]\n"
"addr-gen-mode=eui64\n"
"dhcp-timeout=2147483647\n"
"method=disabled\n"
msgstr ""

#. type: Title =
#: asciidoc/components/neuvector.adoc:1
#, no-wrap
msgid "NeuVector"
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:2
msgid ""
"NeuVector is a security solution for Kubernetes that provides L7 network "
"security, runtime security, supply chain security, and compliance checks in "
"a cohesive package."
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:3
msgid ""
"NeuVector is deployed as a platform of several containers that communicate "
"with each other on various ports and interfaces. The following are the "
"different containers deployed:"
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:4
msgid ""
"Manager. A stateless container which presents the Web-based console. "
"Typically, only one is needed and this can run anywhere. Failure of the "
"Manager does not affect any of the operations of the controller or enforcer. "
"However, certain notifications (events) and recent connection data are "
"cached in memory by the Manager so viewing of these would be affected."
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:5
msgid ""
"Controller. The ‘control plane’ for NeuVector must be deployed in an HA "
"configuration, so configuration is not lost in a node failure. These can run "
"anywhere, although customers often choose to place these on ‘management’, "
"master or infra nodes because of their criticality."
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:6
msgid ""
"Enforcer. This container is deployed as a DaemonSet so one Enforcer is on "
"every node to be protected. Typically deploys to every worker node but "
"scheduling can be enabled for master and infra nodes to deploy there as "
"well. Note: If the Enforcer is not on a cluster node and connections come "
"from a pod on that node, NeuVector labels them as ‘unmanaged’ workloads."
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:7
msgid ""
"Scanner. Performs the vulnerability scanning using the built-in CVE "
"database, as directed by the Controller. Multiple scanners can be deployed "
"to increase scanning capacity. Scanners can run anywhere but are often run "
"on the nodes where the controllers run. See below for sizing considerations "
"of scanner nodes. A scanner can also be invoked independently when used for "
"build-phase scanning, for example, within a pipeline that triggers a scan, "
"retrieves the results, and stops the scanner. The scanner contains the "
"latest CVE database so should be updated daily."
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:8
msgid ""
"Updater. The updater triggers an update of the scanner through a Kubernetes "
"cron job when an update of the CVE database is desired. Please be sure to "
"configure this for your environment."
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:9
msgid ""
"A more in-depth NeuVector onboarding and best practices documentation can be "
"found https://open-docs.neuvector.com/deploying/production/NV_Onboarding_5.0."
"pdf[here]."
msgstr ""

#. type: Title ==
#: asciidoc/components/neuvector.adoc:10
#, no-wrap
msgid "How does SUSE Edge use NeuVector?"
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:11
msgid ""
"SUSE Edge provides a leaner configuration of NeuVector as a starting point "
"for edge deployments."
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:12
msgid ""
"Find the NeuVector configuration changes https://github.com/suse-edge/charts/"
"blob/main/packages/neuvector-core/generated-changes/patch/values.yaml."
"patch[here]."
msgstr ""

#. type: Title ==
#: asciidoc/components/neuvector.adoc:13
#, no-wrap
msgid "Important notes"
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:14
msgid ""
"The `Scanner` container must have enough memory to pull the image to be "
"scanned into memory and expand it. To scan images exceeding 1 GB, increase "
"the scanner's memory to slightly above the largest expected image size."
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:15
msgid ""
"High network connections expected in Protect mode. The `Enforcer` requires "
"CPU and memory when in Protect (inline firewall blocking) mode to hold and "
"inspect connections and possible payload (DLP). Increasing memory and "
"dedicating a CPU core to the `Enforcer` can ensure adequate packet filtering "
"capacity."
msgstr ""

#. type: Plain text
#: asciidoc/components/neuvector.adoc:17
msgid ""
"SUSE Edge is using <<components-eib>> in order to customize base SLE Micro "
"OS images.  Follow <<neuvector-install>> for an air-gapped installation of "
"NeuVector on top of Kubernetes clusters provisioned by EIB."
msgstr ""

#. type: Title =
#: asciidoc/components/rancher-dashboard-extensions.adoc:1
#, no-wrap
msgid "Rancher Dashboard Extensions"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:2
msgid ""
"Extensions allow users, developers, partners, and customers to extend and "
"enhance the Rancher UI. SUSE Edge 3.0 provides KubeVirt and Akri dashboard "
"extensions."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:3
msgid ""
"See `https://ranchermanager.docs.rancher.com/integrations-in-rancher/rancher-"
"extensions[Rancher documentation]` for general information about Rancher "
"Dashboard Extensions."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:5
msgid ""
"To enable extensions Rancher requires ui-plugin operator to be installed. "
"When using the Rancher Dashboard UI, navigate to *Extensions* in the left "
"navigation *Configuration* section. If the ui-plugin operator is not "
"installed you'll get a prompt asking to enable the extensions support as "
"described `https://ranchermanager.docs.rancher.com/integrations-in-rancher/"
"rancher-extensions#installing-extensions[here]`."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:6
msgid "The operator can be also installed using Helm:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/rancher-dashboard-extensions.adoc:7
#, no-wrap
msgid ""
"helm repo add rancher-charts https://charts.rancher.io/\n"
"helm upgrade --create-namespace -n cattle-ui-plugin-system \\\n"
"  --install ui-plugin-operator rancher-charts/ui-plugin-operator\n"
"helm upgrade --create-namespace -n cattle-ui-plugin-system \\\n"
"  --install ui-plugin-operator-crd rancher-charts/ui-plugin-operator-crd\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:8
msgid ""
"Or with Fleet by creating a dedicated GitRepo resource. For more information "
"see xref:fleet.adoc[Fleet] section and `https://github.com/suse-edge/fleet-"
"examples/blob/main/gitrepos/rancher-ui-plugin-operator-gitrepo.yaml[fleet-"
"examples]` repository."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:10
msgid ""
"All SUSE Edge 3.0 components including dashboard extensions are distributed "
"as OCI artifacts. Rancher Dashboard Apps/Marketplace does not support OCI "
"based Helm repositories `https://github.com/rancher/dashboard/"
"issues/9815[yet]`. Therefore, to install SUSE Edge Extensions you can use "
"Helm or Fleet:"
msgstr ""

#. type: Title ===
#: asciidoc/components/rancher-dashboard-extensions.adoc:11
#, no-wrap
msgid "Installing with Helm"
msgstr ""

#. type: delimited block -
#: asciidoc/components/rancher-dashboard-extensions.adoc:12
#, no-wrap
msgid ""
"# KubeVirt extension\n"
"helm install kubevirt-dashboard-extension oci://registry.suse.com/edge/kubevirt-dashboard-extension-chart --version 1.0.0 --namespace cattle-ui-plugin-system\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/rancher-dashboard-extensions.adoc:13
#, no-wrap
msgid ""
"# Akri extension\n"
"helm install akri-dashboard-extension oci://registry.suse.com/edge/akri-dashboard-extension-chart --version 1.0.0 --namespace cattle-ui-plugin-system\n"
msgstr ""

#. type: delimited block =
#: asciidoc/components/rancher-dashboard-extensions.adoc:14
msgid ""
"The extensions need to be installed in `cattle-ui-plugin-system` namespace."
msgstr ""

#. type: delimited block =
#: asciidoc/components/rancher-dashboard-extensions.adoc:15
msgid ""
"After an extension is installed, Rancher Dashboard UI needs to be reloaded."
msgstr ""

#. type: Title ===
#: asciidoc/components/rancher-dashboard-extensions.adoc:16
#, no-wrap
msgid "Installing with Fleet"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:17
msgid ""
"Installing Dashboard Extensions with Fleet requires defining a `gitRepo` "
"resource which points to a Git repository with custom `fleet.yaml` bundle "
"configuration file(s)."
msgstr ""

#. type: delimited block -
#: asciidoc/components/rancher-dashboard-extensions.adoc:18
#, no-wrap
msgid ""
"# KubeVirt extension fleet.yaml\n"
"defaultNamespace: cattle-ui-plugin-system\n"
"helm:\n"
"  releaseName: kubevirt-dashboard-extension\n"
"  chart: oci://registry.suse.com/edge/akri-dashboard-extension-chart\n"
"  version: \"1.0.0\"\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/rancher-dashboard-extensions.adoc:19
#, no-wrap
msgid ""
"# Akri extension fleet.yaml\n"
"defaultNamespace: cattle-ui-plugin-system\n"
"helm:\n"
"  releaseName: akri-dashboard-extension\n"
"  chart: oci://registry.suse.com/edge/akri-dashboard-extension-chart\n"
"  version: \"1.0.0\"\n"
msgstr ""

#. type: delimited block =
#: asciidoc/components/rancher-dashboard-extensions.adoc:20
msgid ""
"The `releaseName` property is required and needs to match the extension name "
"to get the extension correctly installed by ui-plugin-operator."
msgstr ""

#. type: delimited block -
#: asciidoc/components/rancher-dashboard-extensions.adoc:21
#, no-wrap
msgid ""
"cat <<- EOF | kubectl apply -f -\n"
"apiVersion: fleet.cattle.io/v1alpha1\n"
"metadata:\n"
"  name: edge-dashboard-extensions\n"
"  namespace: fleet-local\n"
"spec:\n"
"  repo: https://github.com/suse-edge/fleet-examples.git\n"
"  branch: main\n"
"  paths:\n"
"  - fleets/kubevirt-dashboard-extension/\n"
"  - fleets/akri-dashboard-extension/\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:22
msgid ""
"For more information see xref:fleet.adoc[Fleet] section and `https://github."
"com/suse-edge/fleet-examples[fleet-examples]` repository."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:23
msgid ""
"Once the Extensions are installed they are listed in *Extensions* section "
"under *Installed* tabs. Since they are not installed via Apps/Marketplace, "
"they are marked with `Third-Party` label."
msgstr ""

#. type: Target for macro image
#: asciidoc/components/rancher-dashboard-extensions.adoc:24
#, no-wrap
msgid "installed-dashboard-extensions.png"
msgstr ""

#. type: Title ==
#: asciidoc/components/rancher-dashboard-extensions.adoc:25
#, no-wrap
msgid "KubeVirt Dashboard Extension"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:26
msgid ""
"KubeVirt Extension provides basic virtual machine management for Rancher "
"dashboard UI. It's capabilities are described in xref:virtualization."
"adoc#kubevirt-dashboard-extension[Edge Virtualization]."
msgstr ""

#. type: Title ==
#: asciidoc/components/rancher-dashboard-extensions.adoc:27
#, no-wrap
msgid "Akri Dashboard Extension"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:28
msgid ""
"Akri is a Kubernetes Resource Interface that lets you easily expose "
"heterogeneous leaf devices (such as IP cameras and USB devices) as resources "
"in a Kubernetes cluster, while also supporting the exposure of embedded "
"hardware resources such as GPUs and FPGAs. Akri continually detects nodes "
"that have access to these devices and schedules workloads based on them."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher-dashboard-extensions.adoc:30
msgid ""
"Extension capabilities are further described in xref:akri.adoc#akri-"
"dashboard-extension[Akri section]."
msgstr ""

#. type: Title =
#: asciidoc/components/rancher.adoc:1
#, no-wrap
msgid "Rancher"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:2
msgid ""
"See Rancher upstream documentation at https://ranchermanager.docs.rancher."
"com."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:3
msgid ""
"Rancher is a powerful open-source Kubernetes management platform that "
"streamlines the deployment, operations and monitoring of Kubernetes clusters "
"across multiple environments. Whether you manage clusters on premises, in "
"the cloud, or at the edge, Rancher provides a unified and centralized "
"platform for all your Kubernetes needs."
msgstr ""

#. type: Title ==
#: asciidoc/components/rancher.adoc:4
#, no-wrap
msgid "Key Features of Rancher"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:5
msgid ""
"**Multi-cluster management:** Rancher's intuitive interface lets you manage "
"Kubernetes clusters from anywhere—public clouds, private data centers and "
"edge locations."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:6
msgid ""
"**Security and compliance:** Rancher enforces security policies, role-based "
"access control (RBAC), and compliance standards across your Kubernetes "
"landscape."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:7
msgid ""
"**Simplified cluster operations:** Rancher automates cluster provisioning, "
"upgrades and troubleshooting, simplifying Kubernetes operations for teams of "
"all sizes."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:8
msgid ""
"**Centralized application catalog:** The Rancher application catalog offers "
"a diverse range of Helm charts and Kubernetes Operators, making it easy to "
"deploy and manage containerized applications."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:9
msgid ""
"**Continuous delivery:** Rancher supports GitOps and CI/CD pipelines, "
"enabling automated and streamlined application delivery processes."
msgstr ""

#. type: Title ==
#: asciidoc/components/rancher.adoc:10
#, no-wrap
msgid "Rancher's use in SUSE Edge"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:11
msgid "Rancher provides several core functionalities to the SUSE Edge stack:"
msgstr ""

#. type: Title ===
#: asciidoc/components/rancher.adoc:12
#, no-wrap
msgid "Centralized Kubernetes management"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:13
msgid ""
"In typical edge deployments with numerous distributed clusters, Rancher acts "
"as a central control plane for managing these Kubernetes clusters. It offers "
"a unified interface for provisioning, upgrading, monitoring, and "
"troubleshooting, simplifying operations, and ensuring consistency."
msgstr ""

#. type: Title ===
#: asciidoc/components/rancher.adoc:14
#, no-wrap
msgid "Simplified cluster deployment"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:15
msgid ""
"Rancher streamlines Kubernetes cluster creation on the lightweight SLE Micro "
"(SUSE Linux Enterprise Micro) operating system, easing the rollout of edge "
"infrastructure with robust Kubernetes capabilities."
msgstr ""

#. type: Title ===
#: asciidoc/components/rancher.adoc:16
#, no-wrap
msgid "Application deployment and management"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:17
msgid ""
"The integrated Rancher application catalog can simplify deploying and "
"managing containerized applications across SUSE Edge clusters, enabling "
"seamless edge workload deployment."
msgstr ""

#. type: Title ===
#: asciidoc/components/rancher.adoc:18
#, no-wrap
msgid "Security and policy enforcement"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:19
msgid ""
"Rancher provides policy-based governance tools, role-based access control "
"(RBAC), and integration with external authentication providers. This helps "
"SUSE Edge deployments maintain security and compliance, critical in "
"distributed environments."
msgstr ""

#. type: Title ===
#: asciidoc/components/rancher.adoc:21
#, no-wrap
msgid "GitOps"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:22
msgid ""
"Rancher includes Fleet as a built-in component to allow manage cluster "
"configurations and application deployments with code stored in git."
msgstr ""

#. type: Title ===
#: asciidoc/components/rancher.adoc:23
#, no-wrap
msgid "Observability"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:24
msgid ""
"Rancher includes built-in monitoring and logging tools like Prometheus and "
"Grafana for comprehensive insights into your cluster health and performance."
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:26
msgid ""
"SUSE Edge is using <<components-eib>> in order to customize base SLE Micro "
"OS images.  Follow <<rancher-install>> for an air-gapped installation of "
"Rancher on top of Kubernetes clusters provisioned by EIB."
msgstr ""

#. type: Title ==
#: asciidoc/components/rancher.adoc:27
#, no-wrap
msgid "Additional Resources"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:28
msgid "https://rancher.com/docs/[Rancher Documentation]"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:29
msgid "https://www.rancher.academy/[Rancher Academy]"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:30
msgid "https://rancher.com/community/[Rancher Community]"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:31
msgid "https://helm.sh/[Helm Charts]"
msgstr ""

#. type: Plain text
#: asciidoc/components/rancher.adoc:32
msgid "https://operatorhub.io/[Kubernetes Operators]"
msgstr ""

#. type: Title =
#: asciidoc/components/rke2.adoc:1
#, no-wrap
msgid "RKE2"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:2
msgid "See https://docs.rke2.io/[RKE2 official documentation]."
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:3
msgid ""
"RKE2 is a fully conformant Kubernetes distribution that focuses on security "
"and compliance by:"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:4
msgid ""
"Providing defaults and configuration options that allow clusters to pass the "
"CIS Kubernetes Benchmark v1.6 or v1.23 with minimal operator intervention"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:5
msgid "Enabling FIPS 140-2 compliance"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:6
msgid ""
"Regularly scanning components for CVEs using https://trivy.dev[trivy] in the "
"RKE2 build pipeline"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:7
msgid ""
"RKE2 launches control plane components as static pods, managed by the "
"kubelet. The embedded container runtime is containerd."
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:8
msgid ""
"Note: RKE2 is also known as RKE Government in order to convey another use "
"case and sector it currently targets."
msgstr ""

#. type: Title ==
#: asciidoc/components/rke2.adoc:9
#, no-wrap
msgid "RKE2 vs K3s"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:10
msgid ""
"K3s is a fully compliant and lightweight Kubernetes distribution focused on "
"Edge, IoT, ARM or just for situations where a PhD in K8s clusterology is "
"infeasible."
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:11
msgid ""
"RKE2 combines the best of both worlds from the 1.x version of RKE (hereafter "
"referred to as RKE1) and K3s."
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:12
msgid ""
"From K3s, it inherits the usability, ease of operation and deployment model."
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:13
msgid ""
"From RKE1, it inherits close alignment with upstream Kubernetes. In places, "
"K3s has diverged from upstream Kubernetes in order to optimize for edge "
"deployments, but RKE1 and RKE2 can stay closely aligned with upstream."
msgstr ""

#. type: Title ==
#: asciidoc/components/rke2.adoc:14
#, no-wrap
msgid "How does SUSE Edge use RKE2?"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:15
msgid ""
"RKE2 is a fundamental piece of the SUSE Edge stack. It sits on top of "
"<<components-slmicro,SUSE Linux Micro>>, providing a standard Kubernetes "
"interface required to deploy Edge workloads with minimal footprint."
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:18
msgid ""
"The recommended way of installing RKE2 as part of the SUSE Edge stack is by "
"using Edge Image Builder (EIB). See the <<components-eib,EIB documentation>> "
"for more details on how to configure it to deploy RKE2."
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:19
msgid ""
"EIB is flexible enough to support any parameter required by RKE2, such as "
"specifying the RKE2 version, the https://docs.rke2.io/reference/"
"server_config[servers] or the https://docs.rke2.io/reference/"
"linux_agent_config[agents] configuration, covering all the Edge use cases."
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:20
msgid ""
"For other use cases involving Metal^3^, RKE2 is also being used and "
"installed. In those particular cases, the https://github.com/rancher-sandbox/"
"cluster-api-provider-rke2[Cluster API Provider RKE2] automatically deploys "
"RKE2 on clusters being provisioned with Metal^3^ using the Edge Stack."
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:21
msgid ""
"In those cases, the RKE2 configuration must be applied on the different CRDs "
"involved. An example of how to provide a different CNI using the "
"`RKE2ControlPlane` CRD looks like:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/rke2.adoc:22
#, no-wrap
msgid ""
"apiVersion: controlplane.cluster.x-k8s.io/v1alpha1\n"
"kind: RKE2ControlPlane\n"
"metadata:\n"
"  name: single-node-cluster\n"
"  namespace: default\n"
"spec:\n"
"  serverConfig:\n"
"    cni: calico\n"
"    cniMultusEnable: true\n"
"...\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:23
msgid ""
"For more information about the Metal^3^ use cases, see <<components-metal3>>."
msgstr ""

#. type: Title ===
#: asciidoc/components/rke2.adoc:24
#, no-wrap
msgid "High availability"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:25
msgid ""
"For HA deployments, EIB automatically deploys and configures <<components-"
"metallb,MetalLB>> and the link:https://github.com/suse-edge/endpoint-copier-"
"operator[Endpoint Copier Operator] to expose the RKE2 API endpoint "
"externally."
msgstr ""

#. type: Title ===
#: asciidoc/components/rke2.adoc:26
#, no-wrap
msgid "Networking"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:27
msgid ""
"The supported CNI for the Edge Stack is https://docs.cilium.io/en/stable/"
"[Cilium] with optionally adding the meta-plugin https://github.com/"
"k8snetworkplumbingwg/multus-cni[Multus], but RKE2 supports https://docs.rke2."
"io/install/network_options[a few others] as well."
msgstr ""

#. type: Title ===
#: asciidoc/components/rke2.adoc:28
#, no-wrap
msgid "Storage"
msgstr ""

#. type: Plain text
#: asciidoc/components/rke2.adoc:29
msgid ""
"RKE2 does not provide any kind of persistent storage class or operators. For "
"clusters spanning over multiple nodes, it is recommended to use <<components-"
"longhorn,Longhorn>>."
msgstr ""

#. type: Title =
#: asciidoc/components/sle-micro.adoc:1
#, no-wrap
msgid "SLE Micro"
msgstr ""

#. type: Plain text
#: asciidoc/components/sle-micro.adoc:2
msgid ""
"See https://documentation.suse.com/sle-micro/5.5/[SLE Micro official "
"documentation]"
msgstr ""

#. type: delimited block _
#: asciidoc/components/sle-micro.adoc:3
msgid ""
"SUSE Linux Enterprise Micro is a lightweight and secure operating system for "
"the edge. It merges the enterprise-hardened components of SUSE Linux "
"Enterprise with the features that developers want in a modern, immutable "
"operating system. As a result, you get a reliable infrastructure platform "
"with best-in-class compliance that is also simple to use."
msgstr ""

#. type: Title ==
#: asciidoc/components/sle-micro.adoc:4
#, no-wrap
msgid "How does SUSE Edge use SLE Micro?"
msgstr ""

#. type: Plain text
#: asciidoc/components/sle-micro.adoc:5
msgid ""
"We use SLE Micro as the base operating system for our platform stack. This "
"provides us with a secure, stable and minimal base for building upon."
msgstr ""

#. type: Plain text
#: asciidoc/components/sle-micro.adoc:6
msgid ""
"SLE Micro is unique in its use of file system (Btrfs) snapshots to allow for "
"easy rollbacks in case something goes wrong with an upgrade. This allows for "
"secure remote upgrades for the entire platform even without physical access "
"in case of issues."
msgstr ""

#. type: Plain text
#: asciidoc/components/sle-micro.adoc:9
msgid ""
"SUSE Edge uses the <<components-eib,Edge Image Builder>> to preconfigure the "
"SLE Micro self-install installation image."
msgstr ""

#. type: Title ===
#: asciidoc/components/sle-micro.adoc:10
#, no-wrap
msgid "Local administration"
msgstr ""

#. type: Plain text
#: asciidoc/components/sle-micro.adoc:11
msgid ""
"SLE Micro comes with Cockpit to allow the local management of the host "
"through a Web application."
msgstr ""

#. type: Plain text
#: asciidoc/components/sle-micro.adoc:12
msgid ""
"This service is disabled by default but can be started by enabling the "
"systemd service `cockpit.socket`."
msgstr ""

#. type: Plain text
#: asciidoc/components/sle-micro.adoc:14
msgid ""
"There is no desktop environment available in SLE Micro at the moment but a "
"containerized solution is in development."
msgstr ""

#. type: Title =
#: asciidoc/components/virtualization.adoc:1
#, no-wrap
msgid "Edge Virtualization"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:2
msgid ""
"This section describes how you can use Edge Virtualization to run virtual "
"machines on your edge nodes. It is important to point out that Edge "
"Virtualization is not a comprehensive solution and has limited features; it "
"attempts to solve requirements for lightweight virtualization where basic "
"virtual machine capabilities are required. SUSE provides a more "
"comprehensive virtualization (and hyperconverged infrastructure) solution "
"with https://harvesterhci.io/[Harvester]."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:3
msgid ""
"SUSE Edge Virtualization supports two methods of running virtual machines:"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:4
msgid ""
"Deploying the virtual machines manually via libvirt+qemu-kvm at the host "
"level"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:5
msgid ""
"Deploying the KubeVirt operator for Kubernetes-based management of virtual "
"machines"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:6
msgid ""
"Both options are valid, but only the second one is covered below. If you "
"want to use the standard out-of-the box virtualization mechanisms provided "
"by SLE Micro, a comprehensive guide can be found https://documentation.suse."
"com/sles/15-SP5/html/SLES-all/chap-virtualization-introduction.html[here], "
"and whilst it was primarily written for SUSE Linux Enterprise Server, the "
"concepts are almost identical."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:7
msgid ""
"This guide initially explains how to deploy the additional virtualization "
"components onto a system that has already been pre-deployed, but follows "
"with a section that describes how to embed this configuration in the initial "
"deployment via Edge Image Builder. If you do not want to run through the "
"basics and set things up manually, skip right ahead to that section."
msgstr ""

#. type: Title ==
#: asciidoc/components/virtualization.adoc:8
#, no-wrap
msgid "KubeVirt overview"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:9
msgid ""
"KubeVirt allows for managing Virtual Machines with Kubernetes alongside the "
"rest of your containerized workloads. It does this by running the user space "
"portion of the Linux virtualization stack in a container. This minimizes the "
"requirements on the host system, allowing for easier setup and management."
msgstr ""

#. type: delimited block =
#: asciidoc/components/virtualization.adoc:10
msgid ""
"Details about KubeVirt's architecture can be found in link:https://kubevirt."
"io/user-guide/architecture/[the upstream documentation.]"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:12
msgid ""
"If you are following this guide, we assume you have the following already "
"available:"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:13
msgid ""
"At least one physical host with SLE Micro 5.5+ installed, and with "
"virtualization extensions enabled in the BIOS (see https://documentation."
"suse.com/sles/15-SP5/html/SLES-all/cha-virt-support.html#sec-kvm-requires-"
"hardware[here] for details)."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:14
msgid ""
"Across your nodes, a K3s/RKE2 Kubernetes cluster already deployed and with "
"an appropriate `kubeconfig` that enables superuser access to the cluster."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:15
msgid ""
"Access to the root user — these instructions assume you are the root user, "
"and _not_ escalating your privileges via `sudo`."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:16
msgid ""
"You have https://helm.sh/docs/intro/install/[Helm] available locally with an "
"adequate network connection to be able to push configurations to your "
"Kubernetes cluster and download the required images."
msgstr ""

#. type: Title ==
#: asciidoc/components/virtualization.adoc:17
#, no-wrap
msgid "Manual installation of Edge Virtualization"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:18
msgid ""
"This guide will not walk you through the deployment of Kubernetes, but it "
"assumes that you have either installed the SUSE Edge-appropriate version of "
"https://k3s.io/[K3s] or https://docs.rke2.io/install/quickstart[RKE2] and "
"that you have your kubeconfig configured accordingly so that standard "
"`kubectl` commands can be executed as the superuser. We assume your node "
"forms a single-node cluster, although there are no significant differences "
"expected for multi-node deployments."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:19
msgid ""
"SUSE Edge Virtualization is deployed via three separate Helm charts, "
"specifically:"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:20
msgid ""
"*KubeVirt*: The core virtualization components, that is, Kubernetes CRDs, "
"operators and other components required for enabling Kubernetes to deploy "
"and manage virtual machines."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:21
msgid ""
"*KubeVirt Dashboard Extension*: An optional Rancher UI extension that allows "
"basic virtual machine management, for example, starting/stopping of virtual "
"machines as well as accessing the console."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:22
msgid ""
"*Containerized Data Importer (CDI)*: An additional component that enables "
"persistent-storage integration for KubeVirt, providing capabilities for "
"virtual machines to use existing Kubernetes storage back-ends for data, but "
"also allowing users to import or clone data volumes for virtual machines."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:23
msgid ""
"Each of these Helm charts is versioned according to the SUSE Edge release "
"you are currently using. For production/supported usage, employ the "
"artifacts that can be found in the SUSE Registry."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:24
msgid "First, ensure that your `kubectl` access is working:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:25
#, no-wrap
msgid "$ kubectl get nodes\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:26
#: asciidoc/components/virtualization.adoc:33
#: asciidoc/components/virtualization.adoc:42
msgid "This should show something similar to the following:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:27
#, no-wrap
msgid ""
"NAME                   STATUS   ROLES                       AGE     VERSION\n"
"node1.edge.rdo.wales   Ready    control-plane,etcd,master   4h20m   v1.28.9+rke2r1\n"
"node2.edge.rdo.wales   Ready    control-plane,etcd,master   4h15m   v1.28.9+rke2r1\n"
"node3.edge.rdo.wales   Ready    control-plane,etcd,master   4h15m   v1.28.9+rke2r1\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:28
msgid ""
"Now you can proceed to install the *KubeVirt* and *Containerized Data "
"Importer (CDI)* Helm charts:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:29
#, no-wrap
msgid ""
"$ helm install kubevirt oci://registry.suse.com/edge/kubevirt-chart --namespace kubevirt-system --create-namespace\n"
"$ helm install cdi oci://registry.suse.com/edge/cdi-chart --namespace cdi-system --create-namespace\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:30
msgid ""
"In a few minutes, you should have all KubeVirt and CDI components deployed. "
"You can validate this by checking all the deployed resources in the "
"`kubevirt-system` and `cdi-system` namespace."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:31
msgid "Verify KubeVirt resources:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:32
#, no-wrap
msgid "$ kubectl get all -n kubevirt-system\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:34
#, no-wrap
msgid ""
"NAME                                   READY   STATUS    RESTARTS      AGE\n"
"pod/virt-operator-5fbcf48d58-p7xpm     1/1     Running   0             2m24s\n"
"pod/virt-operator-5fbcf48d58-wnf6s     1/1     Running   0             2m24s\n"
"pod/virt-handler-t594x                 1/1     Running   0             93s\n"
"pod/virt-controller-5f84c69884-cwjvd   1/1     Running   1 (64s ago)   93s\n"
"pod/virt-controller-5f84c69884-xxw6q   1/1     Running   1 (64s ago)   93s\n"
"pod/virt-api-7dfc54cf95-v8kcl          1/1     Running   1 (59s ago)   118s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:35
#, no-wrap
msgid ""
"NAME                                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE\n"
"service/kubevirt-prometheus-metrics   ClusterIP   None            <none>        443/TCP   2m1s\n"
"service/virt-api                      ClusterIP   10.43.56.140    <none>        443/TCP   2m1s\n"
"service/kubevirt-operator-webhook     ClusterIP   10.43.201.121   <none>        443/TCP   2m1s\n"
"service/virt-exportproxy              ClusterIP   10.43.83.23     <none>        443/TCP   2m1s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:36
#, no-wrap
msgid ""
"NAME                          DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE\n"
"daemonset.apps/virt-handler   1         1         1       1            1           kubernetes.io/os=linux   93s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:37
#, no-wrap
msgid ""
"NAME                              READY   UP-TO-DATE   AVAILABLE   AGE\n"
"deployment.apps/virt-operator     2/2     2            2           2m24s\n"
"deployment.apps/virt-controller   2/2     2            2           93s\n"
"deployment.apps/virt-api          1/1     1            1           118s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:38
#, no-wrap
msgid ""
"NAME                                         DESIRED   CURRENT   READY   AGE\n"
"replicaset.apps/virt-operator-5fbcf48d58     2         2         2       2m24s\n"
"replicaset.apps/virt-controller-5f84c69884   2         2         2       93s\n"
"replicaset.apps/virt-api-7dfc54cf95          1         1         1       118s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:39
#, no-wrap
msgid ""
"NAME                            AGE     PHASE\n"
"kubevirt.kubevirt.io/kubevirt   2m24s   Deployed\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:40
msgid "Verify CDI resources:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:41
#, no-wrap
msgid "$ kubectl get all -n cdi-system\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:43
#, no-wrap
msgid ""
"NAME                                   READY   STATUS    RESTARTS   AGE\n"
"pod/cdi-operator-55c74f4b86-692xb      1/1     Running   0          2m24s\n"
"pod/cdi-apiserver-db465b888-62lvr      1/1     Running   0          2m21s\n"
"pod/cdi-deployment-56c7d74995-mgkfn    1/1     Running   0          2m21s\n"
"pod/cdi-uploadproxy-7d7b94b968-6kxc2   1/1     Running   0          2m22s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:44
#, no-wrap
msgid ""
"NAME                             TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\n"
"service/cdi-uploadproxy          ClusterIP   10.43.117.7    <none>        443/TCP    2m22s\n"
"service/cdi-api                  ClusterIP   10.43.20.101   <none>        443/TCP    2m22s\n"
"service/cdi-prometheus-metrics   ClusterIP   10.43.39.153   <none>        8080/TCP   2m21s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:45
#, no-wrap
msgid ""
"NAME                              READY   UP-TO-DATE   AVAILABLE   AGE\n"
"deployment.apps/cdi-operator      1/1     1            1           2m24s\n"
"deployment.apps/cdi-apiserver     1/1     1            1           2m22s\n"
"deployment.apps/cdi-deployment    1/1     1            1           2m21s\n"
"deployment.apps/cdi-uploadproxy   1/1     1            1           2m22s\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:46
#, no-wrap
msgid ""
"NAME                                         DESIRED   CURRENT   READY   AGE\n"
"replicaset.apps/cdi-operator-55c74f4b86      1         1         1       2m24s\n"
"replicaset.apps/cdi-apiserver-db465b888      1         1         1       2m21s\n"
"replicaset.apps/cdi-deployment-56c7d74995    1         1         1       2m21s\n"
"replicaset.apps/cdi-uploadproxy-7d7b94b968   1         1         1       2m22s\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:47
msgid ""
"To verify that the `VirtualMachine` custom resource definitions (CRDs) are "
"deployed, you can validate with:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:48
#, no-wrap
msgid "$ kubectl explain virtualmachine\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:49
msgid ""
"This should print out the definition of the `VirtualMachine` object, which "
"should print as follows:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:50
#, no-wrap
msgid ""
"GROUP:      kubevirt.io\n"
"KIND:       VirtualMachine\n"
"VERSION:    v1\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:51
#, no-wrap
msgid ""
"DESCRIPTION:\n"
"    VirtualMachine handles the VirtualMachines that are not running or are in a\n"
"    stopped state The VirtualMachine contains the template to create the\n"
"    VirtualMachineInstance. It also mirrors the running state of the created\n"
"    VirtualMachineInstance in its status.\n"
"(snip)\n"
msgstr ""

#. type: Title ==
#: asciidoc/components/virtualization.adoc:52
#, no-wrap
msgid "Deploying virtual machines"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:53
msgid ""
"Now that KubeVirt and CDI are deployed, let us define a simple virtual "
"machine based on https://get.opensuse.org/tumbleweed/[openSUSE Tumbleweed]. "
"This virtual machine has the most simple of configurations, using standard "
"\"pod networking\" for a networking configuration identical to any other "
"pod. It also employs non-persistent storage, ensuring the storage is "
"ephemeral, just like in any container that does not have a https://"
"kubernetes.io/docs/concepts/storage/persistent-volumes/[PVC]."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:54
#, no-wrap
msgid ""
"$ kubectl apply -f - <<EOF\n"
"apiVersion: kubevirt.io/v1\n"
"kind: VirtualMachine\n"
"metadata:\n"
"  name: tumbleweed\n"
"  namespace: default\n"
"spec:\n"
"  runStrategy: Always\n"
"  template:\n"
"    spec:\n"
"      domain:\n"
"        devices: {}\n"
"        machine:\n"
"          type: q35\n"
"        memory:\n"
"          guest: 2Gi\n"
"        resources: {}\n"
"      volumes:\n"
"      - containerDisk:\n"
"          image: registry.opensuse.org/home/roxenham/tumbleweed-container-disk/containerfile/cloud-image:latest\n"
"        name: tumbleweed-containerdisk-0\n"
"      - cloudInitNoCloud:\n"
"          userDataBase64: I2Nsb3VkLWNvbmZpZwpkaXNhYmxlX3Jvb3Q6IGZhbHNlCnNzaF9wd2F1dGg6IFRydWUKdXNlcnM6CiAgLSBkZWZhdWx0CiAgLSBuYW1lOiBzdXNlCiAgICBncm91cHM6IHN1ZG8KICAgIHNoZWxsOiAvYmluL2Jhc2gKICAgIHN1ZG86ICBBTEw9KEFMTCkgTk9QQVNTV0Q6QUxMCiAgICBsb2NrX3Bhc3N3ZDogRmFsc2UKICAgIHBsYWluX3RleHRfcGFzc3dkOiAnc3VzZScK\n"
"        name: cloudinitdisk\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:55
msgid "This should print that a `VirtualMachine` was created:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:56
#, no-wrap
msgid "virtualmachine.kubevirt.io/tumbleweed created\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:57
msgid ""
"This `VirtualMachine` definition is minimal, specifying little about the "
"configuration. It simply outlines that it is a machine type \"https://wiki."
"qemu.org/Features/Q35[q35]\" with 2 GB of memory that uses a disk image "
"based on an ephemeral `https://kubevirt.io/user-guide/virtual_machines/"
"disks_and_volumes/#containerdisk[containerDisk]` (that is, a disk image that "
"is stored in a container image from a remote image repository), and "
"specifies a base64 encoded cloudInit disk, which we only use for user "
"creation and password enforcement at boot time (use `base64 -d` to decode "
"it)."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:58
msgid ""
"NOTE: This virtual machine image is only for testing. The image is not "
"officially supported and is only meant as a documentation example."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:59
msgid ""
"This machine takes a few minutes to boot as it needs to download the "
"openSUSE Tumbleweed disk image, but once it has done so, you can view "
"further details about the virtual machine by checking the virtual machine "
"information:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:60
#, no-wrap
msgid "$ kubectl get vmi\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:61
msgid ""
"This should print the node that the virtual machine was started on, and the "
"IP address of the virtual machine. Remember, since it uses pod networking, "
"the reported IP address will be just like any other pod, and routable as "
"such:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:62
#, no-wrap
msgid ""
"NAME         AGE     PHASE     IP           NODENAME               READY\n"
"tumbleweed   4m24s   Running   10.42.2.98   node3.edge.rdo.wales   True\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:63
msgid ""
"When running these commands on the Kubernetes cluster nodes themselves, with "
"a CNI that routes traffic directly to pods (for example, Cilium), you should "
"be able to `ssh` directly to the machine itself. Substitute the following IP "
"address with the one that was assigned to your virtual machine:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:64
#, no-wrap
msgid ""
"$ ssh suse@10.42.2.98\n"
"(password is \"suse\")\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:65
msgid ""
"Once you are in this virtual machine, you can play around, but remember that "
"it is limited in terms of resources, and only has 1 GB disk space. When you "
"are finished, `Ctrl-D` or `exit` to disconnect from the SSH session."
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:66
msgid ""
"The virtual machine process is still wrapped in a standard Kubernetes pod. "
"The `VirtualMachine` CRD is a representation of the desired virtual machine, "
"but the process in which the virtual machine is actually started is via the "
"`https://github.com/kubevirt/kubevirt/blob/main/docs/components.md#virt-"
"launcher[virt-launcher]` pod, a standard Kubernetes pod, just like any other "
"application. For every virtual machine started, you can see there is a `virt-"
"launcher` pod:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:67
#, no-wrap
msgid "$ kubectl get pods\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:68
msgid ""
"This should then show the one `virt-launcher` pod for the Tumbleweed machine "
"that we have defined:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:69
#, no-wrap
msgid ""
"NAME                             READY   STATUS    RESTARTS   AGE\n"
"virt-launcher-tumbleweed-8gcn4   3/3     Running   0          10m\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:70
msgid ""
"If we take a look into this `virt-launcher` pod, you see it is executing "
"`libvirt` and `qemu-kvm` processes. We can enter the pod itself and have a "
"look under the covers, noting that you need to adapt the following command "
"for your pod name:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:71
#, no-wrap
msgid "$ kubectl exec -it virt-launcher-tumbleweed-8gcn4 -- bash\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:72
msgid ""
"Once you are in the pod, try running `virsh` commands along with looking at "
"the processes. You will see the `qemu-system-x86_64` binary running, along "
"with certain processes for monitoring the virtual machine. You will also see "
"the location of the disk image and how the networking is plugged (as a tap "
"device):"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:73
#, no-wrap
msgid ""
"qemu@tumbleweed:/> ps ax\n"
"  PID TTY      STAT   TIME COMMAND\n"
"    1 ?        Ssl    0:00 /usr/bin/virt-launcher-monitor --qemu-timeout 269s --name tumbleweed --uid b9655c11-38f7-4fa8-8f5d-bfe987dab42c --namespace default --kubevirt-share-dir /var/run/kubevirt --ephemeral-disk-dir /var/run/kubevirt-ephemeral-disks --container-disk-dir /var/run/kube\n"
"   12 ?        Sl     0:01 /usr/bin/virt-launcher --qemu-timeout 269s --name tumbleweed --uid b9655c11-38f7-4fa8-8f5d-bfe987dab42c --namespace default --kubevirt-share-dir /var/run/kubevirt --ephemeral-disk-dir /var/run/kubevirt-ephemeral-disks --container-disk-dir /var/run/kubevirt/con\n"
"   24 ?        Sl     0:00 /usr/sbin/virtlogd -f /etc/libvirt/virtlogd.conf\n"
"   25 ?        Sl     0:01 /usr/sbin/virtqemud -f /var/run/libvirt/virtqemud.conf\n"
"   83 ?        Sl     0:31 /usr/bin/qemu-system-x86_64 -name guest=default_tumbleweed,debug-threads=on -S -object {\"qom-type\":\"secret\",\"id\":\"masterKey0\",\"format\":\"raw\",\"file\":\"/var/run/kubevirt-private/libvirt/qemu/lib/domain-1-default_tumbleweed/master-key.aes\"} -machine pc-q35-7.1,usb\n"
"  286 pts/0    Ss     0:00 bash\n"
"  320 pts/0    R+     0:00 ps ax\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:74
#, no-wrap
msgid ""
"qemu@tumbleweed:/> virsh list --all\n"
" Id   Name                 State\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:75
#, no-wrap
msgid " 1    default_tumbleweed   running\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:76
#, no-wrap
msgid ""
"qemu@tumbleweed:/> virsh domblklist 1\n"
" Target   Source\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:77
#, no-wrap
msgid ""
" sda      /var/run/kubevirt-ephemeral-disks/disk-data/tumbleweed-containerdisk-0/disk.qcow2\n"
" sdb      /var/run/kubevirt-ephemeral-disks/cloud-init-data/default/tumbleweed/noCloud.iso\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:78
#, no-wrap
msgid ""
"qemu@tumbleweed:/> virsh domiflist 1\n"
" Interface   Type       Source   Model                     MAC\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:79
#, no-wrap
msgid " tap0        ethernet   -        virtio-non-transitional   e6:e9:1a:05:c0:92\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:80
msgid "qemu@tumbleweed:/> exit exit"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:81
#, no-wrap
msgid "Finally, let us delete this virtual machine to clean up:\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:82
#: asciidoc/components/virtualization.adoc:90
#: asciidoc/components/virtualization.adoc:93
#: asciidoc/components/virtualization.adoc:96
#: asciidoc/components/virtualization.adoc:99
#: asciidoc/components/virtualization.adoc:103
#: asciidoc/components/virtualization.adoc:106
#: asciidoc/components/virtualization.adoc:110
#: asciidoc/components/virtualization.adoc:113
#: asciidoc/components/virtualization.adoc:116
#: asciidoc/components/virtualization.adoc:119
#: asciidoc/components/virtualization.adoc:133
#: asciidoc/components/virtualization.adoc:136
#: asciidoc/components/virtualization.adoc:139
#: asciidoc/components/virtualization.adoc:142
#: asciidoc/components/virtualization.adoc:145
#, no-wrap
msgid "[,shell]\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:83
msgid ""
"$ kubectl delete vm/tumbleweed virtualmachine.kubevirt.io \"tumbleweed\" "
"deleted"
msgstr ""

#. type: Title ==
#: asciidoc/components/virtualization.adoc:84
#, no-wrap
msgid "Using virtctl"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:85
msgid ""
"Along with the standard Kubernetes CLI tooling, that is, `kubectl`, KubeVirt "
"comes with an accompanying CLI utility that allows you to interface with "
"your cluster in a way that bridges some gaps between the virtualization "
"world and the world that Kubernetes was designed for. For example, the "
"`virtctl` tool provides the capability of managing the lifecycle of virtual "
"machines (starting, stopping, restarting, etc.), providing access to the "
"virtual consoles, uploading virtual machine images, as well as interfacing "
"with Kubernetes constructs such as services, without using the API or CRDs "
"directly."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:86
msgid "Let us download the latest stable version of the `virtctl` tool:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:87
#: asciidoc/components/virtualization.adoc:126
msgid "[,shell]"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:88
msgid ""
"$ export VERSION=v1.1.0 $ wget https://github.com/kubevirt/kubevirt/releases/"
"download/${VERSION}/virtctl-${VERSION}-linux-amd64"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:89
#, no-wrap
msgid "If you are using a different architecture or a non-Linux machine, you can find other releases https://github.com/kubevirt/kubevirt/releases[here]. You need to make this executable before proceeding, and it may be useful to move it to a location within your `$PATH`:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:91
msgid ""
"$ mv virtctl-${VERSION}-linux-amd64 /usr/local/bin/virtctl $ chmod a+x /usr/"
"local/bin/virtctl"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:92
#, no-wrap
msgid "You can then use the `virtctl` command-line tool to create virtual machines. Let us replicate our previous virtual machine, noting that we are piping the output directly into `kubectl apply`:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:94
#, no-wrap
msgid ""
"$ virtctl create vm --name virtctl-example --memory=1Gi \\\n"
"    --volume-containerdisk=src:registry.opensuse.org/home/roxenham/tumbleweed-container-disk/containerfile/cloud-image:latest \\\n"
"    --cloud-init-user-data \"I2Nsb3VkLWNvbmZpZwpkaXNhYmxlX3Jvb3Q6IGZhbHNlCnNzaF9wd2F1dGg6IFRydWUKdXNlcnM6CiAgLSBkZWZhdWx0CiAgLSBuYW1lOiBzdXNlCiAgICBncm91cHM6IHN1ZG8KICAgIHNoZWxsOiAvYmluL2Jhc2gKICAgIHN1ZG86ICBBTEw9KEFMTCkgTk9QQVNTV0Q6QUxMCiAgICBsb2NrX3Bhc3N3ZDogRmFsc2UKICAgIHBsYWluX3RleHRfcGFzc3dkOiAnc3VzZScK\" | kubectl apply -f -\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:95
#, no-wrap
msgid "This should then show the virtual machine running (it should start a lot quicker this time given that the container image will be cached):\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:97
msgid ""
"$ kubectl get vmi NAME AGE PHASE IP NODENAME READY virtctl-example 52s "
"Running 10.42.2.29 node3.edge.rdo.wales True"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:98
#, no-wrap
msgid "Now we can use `virtctl` to connect directly to the virtual machine:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:100
msgid ""
"$ virtctl ssh suse@virtctl-example (password is \"suse\" - Ctrl-D to exit)"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:101
#, no-wrap
msgid "There are plenty of other commands that can be used by `virtctl`. For example, `virtctl console` can give you access to the serial console if networking is not working, and you can use `virtctl  guestosinfo` to get comprehensive OS information, subject to the guest having the `qemu-guest-agent` installed and running.\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:102
#, no-wrap
msgid "Finally, let us pause and resume the virtual machine:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:104
msgid ""
"$ virtctl pause vm virtctl-example VMI virtctl-example was scheduled to pause"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:105
#, no-wrap
msgid "You find that the `VirtualMachine` object shows as *Paused* and the `VirtualMachineInstance` object shows as *Running* but *READY=False*:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:107
msgid ""
"$ kubectl get vm NAME AGE STATUS READY virtctl-example 8m14s Paused False"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:108
msgid ""
"$ kubectl get vmi NAME AGE PHASE IP NODENAME READY virtctl-example 8m15s "
"Running 10.42.2.29 node3.edge.rdo.wales False"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:109
#, no-wrap
msgid "You also find that you can no longer connect to the virtual machine:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:111
msgid ""
"$ virtctl ssh suse@virtctl-example can't access VMI virtctl-example: "
"Operation cannot be fulfilled on virtualmachineinstance.kubevirt.io "
"\"virtctl-example\": VMI is paused"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:112
#, no-wrap
msgid "Let us resume the virtual machine and try again:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:114
msgid ""
"$ virtctl unpause vm virtctl-example VMI virtctl-example was scheduled to "
"unpause"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:115
#, no-wrap
msgid "Now we should be able to re-establish a connection:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:117
msgid ""
"$ virtctl ssh suse@virtctl-example suse@vmi/virtctl-example.default's "
"password: suse@virtctl-example:~> exit logout"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:118
#, no-wrap
msgid "Finally, let us remove the virtual machine:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:120
msgid ""
"$ kubectl delete vm/virtctl-example virtualmachine.kubevirt.io \"virtctl-"
"example\" deleted"
msgstr ""

#. type: Title ==
#: asciidoc/components/virtualization.adoc:121
#, no-wrap
msgid "Simple ingress networking"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:122
msgid ""
"In this section, we show how you can expose virtual machines as standard "
"Kubernetes services and make them available via the Kubernetes ingress "
"service, for example, https://docs.rke2.io/networking/"
"networking_services#nginx-ingress-controller[NGINX with RKE2] or https://"
"docs.k3s.io/networking/networking-services#traefik-ingress-"
"controller[Traefik with K3s]. This document assumes that these components "
"are already configured appropriately and that you have an appropriate DNS "
"pointer, for example, via a wild card, to point at your Kubernetes server "
"nodes or your ingress virtual IP for proper ingress resolution."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:123
msgid ""
"> NOTE: In SUSE Edge 3.0+, if you are using K3s in a multi-server node "
"configuration, you might have needed to configure a MetalLB-based VIP for "
"Ingress; this is not required for RKE2."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:124
msgid ""
"In the example environment, another openSUSE Tumbleweed virtual machine is "
"deployed, cloud-init is used to install NGINX as a simple Web server at boot "
"time, and a simple message is configured to be returned to verify that it "
"works as expected when a call is made. To see how this is done, simply "
"`base64 -d` the cloud-init section in the output below."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:125
msgid "Let us create this virtual machine now:"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:127
#, no-wrap
msgid ""
"$ kubectl apply -f - <<EOF\n"
"apiVersion: kubevirt.io/v1\n"
"kind: VirtualMachine\n"
"metadata:\n"
"  name: ingress-example\n"
"  namespace: default\n"
"spec:\n"
"  runStrategy: Always\n"
"  template:\n"
"    metadata:\n"
"      labels:\n"
"        app: nginx\n"
"    spec:\n"
"      domain:\n"
"        devices: {}\n"
"        machine:\n"
"          type: q35\n"
"        memory:\n"
"          guest: 2Gi\n"
"        resources: {}\n"
"      volumes:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:128
#, no-wrap
msgid "containerDisk:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:129
#, no-wrap
msgid ""
"image: registry.opensuse.org/home/roxenham/tumbleweed-container-disk/containerfile/cloud-image:latest\n"
"name: tumbleweed-containerdisk-0\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:130
#, no-wrap
msgid "cloudInitNoCloud:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:131
#, no-wrap
msgid ""
"userDataBase64: I2Nsb3VkLWNvbmZpZwpkaXNhYmxlX3Jvb3Q6IGZhbHNlCnNzaF9wd2F1dGg6IFRydWUKdXNlcnM6CiAgLSBkZWZhdWx0CiAgLSBuYW1lOiBzdXNlCiAgICBncm91cHM6IHN1ZG8KICAgIHNoZWxsOiAvYmluL2Jhc2gKICAgIHN1ZG86ICBBTEw9KEFMTCkgTk9QQVNTV0Q6QUxMCiAgICBsb2NrX3Bhc3N3ZDogRmFsc2UKICAgIHBsYWluX3RleHRfcGFzc3dkOiAnc3VzZScKcnVuY21kOgogIC0genlwcGVyIGluIC15IG5naW54CiAgLSBzeXN0ZW1jdGwgZW5hYmxlIC0tbm93IG5naW54CiAgLSBlY2hvICJJdCB3b3JrcyEiID4gL3Nydi93d3cvaHRkb2NzL2luZGV4Lmh0bQo=\n"
"name: cloudinitdisk\n"
"EOF\n"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:132
#, no-wrap
msgid "When this virtual machine has successfully started, we can use the `virtctl` command to expose the `VirtualMachineInstance` with an external port of `8080` and a target port of `80` (where NGINX listens by default). We use the `virtctl` command here as it understands the mapping between the virtual machine object and the pod. This creates a new service for us:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:134
msgid ""
"$ virtctl expose vmi ingress-example --port=8080 --target-port=80 --"
"name=ingress-example Service ingress-example successfully exposed for vmi "
"ingress-example"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:135
#, no-wrap
msgid "We will then have an appropriate service automatically created:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:137
msgid ""
"$ kubectl get svc/ingress-example NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S)  "
"AGE ingress-example ClusterIP 10.43.217.19 <none> 8080/TCP 9s"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:138
#, no-wrap
msgid "Next, if you then use `kubectl create ingress`, we can create an ingress object that points to this service. Adapt the URL (known as the \"host\" in the https://kubernetes.io/docs/reference/kubectl/generated/kubectl_create/kubectl_create_ingress/[ingress] object) here to match your DNS configuration and ensure that you point it to port `8080`:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:140
msgid ""
"$ kubectl create ingress ingress-example --rule=ingress-example.suse.local/"
"=ingress-example:8080"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:141
#, no-wrap
msgid "With DNS being configured correctly, you should be able to curl the URL immediately:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:143
msgid "$ curl ingress-example.suse.local It works!"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:144
#, no-wrap
msgid "Let us clean up by removing this virtual machine and its service and ingress resources:\n"
msgstr ""

#. type: Plain text
#: asciidoc/components/virtualization.adoc:146
msgid ""
"$ kubectl delete vm/ingress-example svc/ingress-example ingress/ingress-"
"example virtualmachine.kubevirt.io \"ingress-example\" deleted service "
"\"ingress-example\" deleted ingress.networking.k8s.io \"ingress-example\" "
"deleted"
msgstr ""

#. type: Title ==
#: asciidoc/components/virtualization.adoc:147
#, no-wrap
msgid "Using the Rancher UI extension"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:148
msgid ""
"SUSE Edge Virtualization provides a UI extension for Rancher Manager, "
"enabling basic virtual machine management using the Rancher dashboard UI."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:150
msgid ""
"See xref:rancher-dashboard-extensions.adoc[Rancher Dashboard Extensions "
"section] for installation guidance."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:151
msgid "[#kubevirt-dashboard-extension]"
msgstr ""

#. type: Title ===
#: asciidoc/components/virtualization.adoc:152
#, no-wrap
msgid "Using KubeVirt Rancher Dashboard Extension"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:153
msgid ""
"The extension introduces a new *KubeVirt* section to the Cluster Explorer. "
"This section is added to any managed cluster which has KubeVirt installed."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:154
msgid ""
"The extension allows you to directly interact with two KubeVirt resources:"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:155
msgid ""
"1. `Virtual Machine instances` — A resource representing a single running "
"virtual machine instance.  2. `Virtual Machines` — A resource used to manage "
"virtual machines lifecycle."
msgstr ""

#. type: Title ====
#: asciidoc/components/virtualization.adoc:156
#, no-wrap
msgid "Creating a virtual machine"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:157
msgid ""
"1. Navigate to *Cluster Explorer* clicking KubeVirt-enabled managed cluster "
"in the left navigation.  2. Navigate to *KubeVirt > Virtual Machines* page "
"and click `Create from YAML` in the upper right of the screen.  3. Fill in "
"or paste a virtual machine definition and press `Create`. Use virtual "
"machine definition from Deploying Virtual Machines section as an inspiration."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:158
msgid "image::virtual-machines-page.png[]"
msgstr ""

#. type: Title ====
#: asciidoc/components/virtualization.adoc:159
#, no-wrap
msgid "Starting and stopping virtual machines"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:160
msgid ""
"Start and stop virtual machines using the action menu accessed from the *⋮* "
"drop-down list to the right of each virtual machine or use group actions at "
"the top of the list by selecting virtual machines to perform the action on."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:161
msgid ""
"It is possible to run start and stop actions only on the virtual machines "
"which have `spec.running` property defined. In case when `spec.runStrategy` "
"is used, it is not possible to directly start and stop such a machine. For "
"more information, see https://kubevirt.io/user-guide/virtual_machines/"
"run_strategies/#run-strategies[KubeVirt documentation]."
msgstr ""

#. type: Title ====
#: asciidoc/components/virtualization.adoc:162
#, no-wrap
msgid "Accessing virtual machine console"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:163
msgid ""
"The \"Virtual machines\" list provides a `Console` drop-down list that "
"allows to connect to the machine using *VNC or Serial Console*. This action "
"is only available to running machines."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:164
msgid ""
"In some cases, it takes a short while before the console is accessible on a "
"freshly started virtual machine."
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:165
msgid "image::vnc-console-ui.png[]"
msgstr ""

#. type: delimited block -
#: asciidoc/components/virtualization.adoc:167
msgid ""
"SUSE Edge is using <<components-eib>> in order to customize base SLE Micro "
"OS images.  Follow <<kubevirt-install>> for an air-gapped installation of "
"both KubeVirt and CDI on top of Kubernetes clusters provisioned by EIB."
msgstr ""
